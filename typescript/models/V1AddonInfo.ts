/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddonMeta } from './AddonMeta';
import {
    AddonMetaFromJSON,
    AddonMetaFromJSONTyped,
    AddonMetaToJSON,
} from './AddonMeta';

/**
 * 
 * @export
 * @interface V1AddonInfo
 */
export interface V1AddonInfo {
    /**
     * 
     * @type {AddonMeta}
     * @memberof V1AddonInfo
     */
    meta: AddonMeta;
    /**
     * 
     * @type {string}
     * @memberof V1AddonInfo
     */
    registryName: string;
}

/**
 * Check if a given object implements the V1AddonInfo interface.
 */
export function instanceOfV1AddonInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "meta" in value;
    isInstance = isInstance && "registryName" in value;

    return isInstance;
}

export function V1AddonInfoFromJSON(json: any): V1AddonInfo {
    return V1AddonInfoFromJSONTyped(json, false);
}

export function V1AddonInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1AddonInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meta': AddonMetaFromJSON(json['Meta']),
        'registryName': json['registryName'],
    };
}

export function V1AddonInfoToJSON(value?: V1AddonInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Meta': AddonMetaToJSON(value.meta),
        'registryName': value.registryName,
    };
}

