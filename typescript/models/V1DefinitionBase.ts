/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1beta1ComponentDefinitionSpec } from './V1beta1ComponentDefinitionSpec';
import {
    V1beta1ComponentDefinitionSpecFromJSON,
    V1beta1ComponentDefinitionSpecFromJSONTyped,
    V1beta1ComponentDefinitionSpecToJSON,
} from './V1beta1ComponentDefinitionSpec';
import type { V1beta1PolicyDefinitionSpec } from './V1beta1PolicyDefinitionSpec';
import {
    V1beta1PolicyDefinitionSpecFromJSON,
    V1beta1PolicyDefinitionSpecFromJSONTyped,
    V1beta1PolicyDefinitionSpecToJSON,
} from './V1beta1PolicyDefinitionSpec';
import type { V1beta1TraitDefinitionSpec } from './V1beta1TraitDefinitionSpec';
import {
    V1beta1TraitDefinitionSpecFromJSON,
    V1beta1TraitDefinitionSpecFromJSONTyped,
    V1beta1TraitDefinitionSpecToJSON,
} from './V1beta1TraitDefinitionSpec';
import type { V1beta1WorkflowStepDefinitionSpec } from './V1beta1WorkflowStepDefinitionSpec';
import {
    V1beta1WorkflowStepDefinitionSpecFromJSON,
    V1beta1WorkflowStepDefinitionSpecFromJSONTyped,
    V1beta1WorkflowStepDefinitionSpecToJSON,
} from './V1beta1WorkflowStepDefinitionSpec';

/**
 * 
 * @export
 * @interface V1DefinitionBase
 */
export interface V1DefinitionBase {
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    category: string;
    /**
     * 
     * @type {V1beta1ComponentDefinitionSpec}
     * @memberof V1DefinitionBase
     */
    component?: V1beta1ComponentDefinitionSpec;
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    icon: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1DefinitionBase
     */
    labels: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    ownerAddon: string;
    /**
     * 
     * @type {V1beta1PolicyDefinitionSpec}
     * @memberof V1DefinitionBase
     */
    policy?: V1beta1PolicyDefinitionSpec;
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    status: string;
    /**
     * 
     * @type {V1beta1TraitDefinitionSpec}
     * @memberof V1DefinitionBase
     */
    trait?: V1beta1TraitDefinitionSpec;
    /**
     * 
     * @type {V1beta1WorkflowStepDefinitionSpec}
     * @memberof V1DefinitionBase
     */
    workflowStep?: V1beta1WorkflowStepDefinitionSpec;
    /**
     * 
     * @type {string}
     * @memberof V1DefinitionBase
     */
    workloadType?: string;
}

/**
 * Check if a given object implements the V1DefinitionBase interface.
 */
export function instanceOfV1DefinitionBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "labels" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ownerAddon" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function V1DefinitionBaseFromJSON(json: any): V1DefinitionBase {
    return V1DefinitionBaseFromJSONTyped(json, false);
}

export function V1DefinitionBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1DefinitionBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'category': json['category'],
        'component': !exists(json, 'component') ? undefined : V1beta1ComponentDefinitionSpecFromJSON(json['component']),
        'description': json['description'],
        'icon': json['icon'],
        'labels': json['labels'],
        'name': json['name'],
        'ownerAddon': json['ownerAddon'],
        'policy': !exists(json, 'policy') ? undefined : V1beta1PolicyDefinitionSpecFromJSON(json['policy']),
        'status': json['status'],
        'trait': !exists(json, 'trait') ? undefined : V1beta1TraitDefinitionSpecFromJSON(json['trait']),
        'workflowStep': !exists(json, 'workflowStep') ? undefined : V1beta1WorkflowStepDefinitionSpecFromJSON(json['workflowStep']),
        'workloadType': !exists(json, 'workloadType') ? undefined : json['workloadType'],
    };
}

export function V1DefinitionBaseToJSON(value?: V1DefinitionBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'category': value.category,
        'component': V1beta1ComponentDefinitionSpecToJSON(value.component),
        'description': value.description,
        'icon': value.icon,
        'labels': value.labels,
        'name': value.name,
        'ownerAddon': value.ownerAddon,
        'policy': V1beta1PolicyDefinitionSpecToJSON(value.policy),
        'status': value.status,
        'trait': V1beta1TraitDefinitionSpecToJSON(value.trait),
        'workflowStep': V1beta1WorkflowStepDefinitionSpecToJSON(value.workflowStep),
        'workloadType': value.workloadType,
    };
}

