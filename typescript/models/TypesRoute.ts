/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TypesHeader } from './TypesHeader';
import {
    TypesHeaderFromJSON,
    TypesHeaderFromJSONTyped,
    TypesHeaderToJSON,
} from './TypesHeader';
import type { TypesPermission } from './TypesPermission';
import {
    TypesPermissionFromJSON,
    TypesPermissionFromJSONTyped,
    TypesPermissionToJSON,
} from './TypesPermission';

/**
 * 
 * @export
 * @interface TypesRoute
 */
export interface TypesRoute {
    /**
     * 
     * @type {Array<TypesHeader>}
     * @memberof TypesRoute
     */
    headers?: Array<TypesHeader>;
    /**
     * 
     * @type {string}
     * @memberof TypesRoute
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof TypesRoute
     */
    path: string;
    /**
     * 
     * @type {TypesPermission}
     * @memberof TypesRoute
     */
    permission?: TypesPermission;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TypesRoute
     */
    resourceMap?: { [key: string]: string; };
}

/**
 * Check if a given object implements the TypesRoute interface.
 */
export function instanceOfTypesRoute(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "method" in value;
    isInstance = isInstance && "path" in value;

    return isInstance;
}

export function TypesRouteFromJSON(json: any): TypesRoute {
    return TypesRouteFromJSONTyped(json, false);
}

export function TypesRouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesRoute {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'headers': !exists(json, 'headers') ? undefined : ((json['headers'] as Array<any>).map(TypesHeaderFromJSON)),
        'method': json['method'],
        'path': json['path'],
        'permission': !exists(json, 'permission') ? undefined : TypesPermissionFromJSON(json['permission']),
        'resourceMap': !exists(json, 'resourceMap') ? undefined : json['resourceMap'],
    };
}

export function TypesRouteToJSON(value?: TypesRoute | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'headers': value.headers === undefined ? undefined : ((value.headers as Array<any>).map(TypesHeaderToJSON)),
        'method': value.method,
        'path': value.path,
        'permission': TypesPermissionToJSON(value.permission),
        'resourceMap': value.resourceMap,
    };
}

