/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V1ApplicationTriggerBase
 */
export interface V1ApplicationTriggerBase {
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    componentName?: string;
    /**
     * 
     * @type {Date}
     * @memberof V1ApplicationTriggerBase
     */
    createTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    payloadType: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    registry: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    type: string;
    /**
     * 
     * @type {Date}
     * @memberof V1ApplicationTriggerBase
     */
    updateTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTriggerBase
     */
    workflowName: string;
}

/**
 * Check if a given object implements the V1ApplicationTriggerBase interface.
 */
export function instanceOfV1ApplicationTriggerBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "payloadType" in value;
    isInstance = isInstance && "registry" in value;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "updateTime" in value;
    isInstance = isInstance && "workflowName" in value;

    return isInstance;
}

export function V1ApplicationTriggerBaseFromJSON(json: any): V1ApplicationTriggerBase {
    return V1ApplicationTriggerBaseFromJSONTyped(json, false);
}

export function V1ApplicationTriggerBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ApplicationTriggerBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': !exists(json, 'alias') ? undefined : json['alias'],
        'componentName': !exists(json, 'componentName') ? undefined : json['componentName'],
        'createTime': (new Date(json['createTime'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'name': json['name'],
        'payloadType': json['payloadType'],
        'registry': json['registry'],
        'token': json['token'],
        'type': json['type'],
        'updateTime': (new Date(json['updateTime'])),
        'workflowName': json['workflowName'],
    };
}

export function V1ApplicationTriggerBaseToJSON(value?: V1ApplicationTriggerBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'componentName': value.componentName,
        'createTime': (value.createTime.toISOString()),
        'description': value.description,
        'name': value.name,
        'payloadType': value.payloadType,
        'registry': value.registry,
        'token': value.token,
        'type': value.type,
        'updateTime': (value.updateTime.toISOString()),
        'workflowName': value.workflowName,
    };
}

