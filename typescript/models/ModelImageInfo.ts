/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelImageRepository } from './ModelImageRepository';
import {
    ModelImageRepositoryFromJSON,
    ModelImageRepositoryFromJSONTyped,
    ModelImageRepositoryToJSON,
} from './ModelImageRepository';
import type { ModelImageResource } from './ModelImageResource';
import {
    ModelImageResourceFromJSON,
    ModelImageResourceFromJSONTyped,
    ModelImageResourceToJSON,
} from './ModelImageResource';

/**
 * 
 * @export
 * @interface ModelImageInfo
 */
export interface ModelImageInfo {
    /**
     * 
     * @type {ModelImageRepository}
     * @memberof ModelImageInfo
     */
    repository?: ModelImageRepository;
    /**
     * 
     * @type {ModelImageResource}
     * @memberof ModelImageInfo
     */
    resource?: ModelImageResource;
    /**
     * 
     * @type {string}
     * @memberof ModelImageInfo
     */
    type: string;
}

/**
 * Check if a given object implements the ModelImageInfo interface.
 */
export function instanceOfModelImageInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ModelImageInfoFromJSON(json: any): ModelImageInfo {
    return ModelImageInfoFromJSONTyped(json, false);
}

export function ModelImageInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelImageInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'repository': !exists(json, 'repository') ? undefined : ModelImageRepositoryFromJSON(json['repository']),
        'resource': !exists(json, 'resource') ? undefined : ModelImageResourceFromJSON(json['resource']),
        'type': json['type'],
    };
}

export function ModelImageInfoToJSON(value?: ModelImageInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'repository': ModelImageRepositoryToJSON(value.repository),
        'resource': ModelImageResourceToJSON(value.resource),
        'type': value.type,
    };
}

