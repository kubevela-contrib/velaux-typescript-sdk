/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChartDependency } from './ChartDependency';
import {
    ChartDependencyFromJSON,
    ChartDependencyFromJSONTyped,
    ChartDependencyToJSON,
} from './ChartDependency';
import type { ChartMaintainer } from './ChartMaintainer';
import {
    ChartMaintainerFromJSON,
    ChartMaintainerFromJSONTyped,
    ChartMaintainerToJSON,
} from './ChartMaintainer';

/**
 * 
 * @export
 * @interface ChartMetadata
 */
export interface ChartMetadata {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ChartMetadata
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    apiVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    appVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    condition?: string;
    /**
     * 
     * @type {Array<ChartDependency>}
     * @memberof ChartMetadata
     */
    dependencies?: Array<ChartDependency>;
    /**
     * 
     * @type {boolean}
     * @memberof ChartMetadata
     */
    deprecated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    home?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    icon?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChartMetadata
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    kubeVersion?: string;
    /**
     * 
     * @type {Array<ChartMaintainer>}
     * @memberof ChartMetadata
     */
    maintainers?: Array<ChartMaintainer>;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChartMetadata
     */
    sources?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    tags?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartMetadata
     */
    version?: string;
}

/**
 * Check if a given object implements the ChartMetadata interface.
 */
export function instanceOfChartMetadata(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChartMetadataFromJSON(json: any): ChartMetadata {
    return ChartMetadataFromJSONTyped(json, false);
}

export function ChartMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChartMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'annotations': !exists(json, 'annotations') ? undefined : json['annotations'],
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'appVersion': !exists(json, 'appVersion') ? undefined : json['appVersion'],
        'condition': !exists(json, 'condition') ? undefined : json['condition'],
        'dependencies': !exists(json, 'dependencies') ? undefined : ((json['dependencies'] as Array<any>).map(ChartDependencyFromJSON)),
        'deprecated': !exists(json, 'deprecated') ? undefined : json['deprecated'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'home': !exists(json, 'home') ? undefined : json['home'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'kubeVersion': !exists(json, 'kubeVersion') ? undefined : json['kubeVersion'],
        'maintainers': !exists(json, 'maintainers') ? undefined : ((json['maintainers'] as Array<any>).map(ChartMaintainerFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'sources': !exists(json, 'sources') ? undefined : json['sources'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ChartMetadataToJSON(value?: ChartMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'annotations': value.annotations,
        'apiVersion': value.apiVersion,
        'appVersion': value.appVersion,
        'condition': value.condition,
        'dependencies': value.dependencies === undefined ? undefined : ((value.dependencies as Array<any>).map(ChartDependencyToJSON)),
        'deprecated': value.deprecated,
        'description': value.description,
        'home': value.home,
        'icon': value.icon,
        'keywords': value.keywords,
        'kubeVersion': value.kubeVersion,
        'maintainers': value.maintainers === undefined ? undefined : ((value.maintainers as Array<any>).map(ChartMaintainerToJSON)),
        'name': value.name,
        'sources': value.sources,
        'tags': value.tags,
        'type': value.type,
        'version': value.version,
    };
}

