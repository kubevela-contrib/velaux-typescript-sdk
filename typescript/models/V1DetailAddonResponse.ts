/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddonDependency } from './AddonDependency';
import {
    AddonDependencyFromJSON,
    AddonDependencyFromJSONTyped,
    AddonDependencyToJSON,
} from './AddonDependency';
import type { AddonDeployTo } from './AddonDeployTo';
import {
    AddonDeployToFromJSON,
    AddonDeployToFromJSONTyped,
    AddonDeployToToJSON,
} from './AddonDeployTo';
import type { AddonSystemRequirements } from './AddonSystemRequirements';
import {
    AddonSystemRequirementsFromJSON,
    AddonSystemRequirementsFromJSONTyped,
    AddonSystemRequirementsToJSON,
} from './AddonSystemRequirements';
import type { SchemaUIParameter } from './SchemaUIParameter';
import {
    SchemaUIParameterFromJSON,
    SchemaUIParameterFromJSONTyped,
    SchemaUIParameterToJSON,
} from './SchemaUIParameter';
import type { V1AddonDefinition } from './V1AddonDefinition';
import {
    V1AddonDefinitionFromJSON,
    V1AddonDefinitionFromJSONTyped,
    V1AddonDefinitionToJSON,
} from './V1AddonDefinition';

/**
 * 
 * @export
 * @interface V1DetailAddonResponse
 */
export interface V1DetailAddonResponse {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1DetailAddonResponse
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof V1DetailAddonResponse
     */
    availableVersions: Array<string>;
    /**
     * 
     * @type {Array<V1AddonDefinition>}
     * @memberof V1DetailAddonResponse
     */
    definitions: Array<V1AddonDefinition>;
    /**
     * 
     * @type {Array<AddonDependency>}
     * @memberof V1DetailAddonResponse
     */
    dependencies?: Array<AddonDependency>;
    /**
     * 
     * @type {AddonDeployTo}
     * @memberof V1DetailAddonResponse
     */
    deployTo?: AddonDeployTo;
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    detail?: string;
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    icon: string;
    /**
     * 
     * @type {boolean}
     * @memberof V1DetailAddonResponse
     */
    invisible: boolean;
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1DetailAddonResponse
     */
    needNamespace?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    registryName?: string;
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    schema: string;
    /**
     * 
     * @type {AddonSystemRequirements}
     * @memberof V1DetailAddonResponse
     */
    system?: AddonSystemRequirements;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1DetailAddonResponse
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<SchemaUIParameter>}
     * @memberof V1DetailAddonResponse
     */
    uiSchema: Array<SchemaUIParameter>;
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    url?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1DetailAddonResponse
     */
    uxPlugins?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof V1DetailAddonResponse
     */
    version: string;
}

/**
 * Check if a given object implements the V1DetailAddonResponse interface.
 */
export function instanceOfV1DetailAddonResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "availableVersions" in value;
    isInstance = isInstance && "definitions" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "invisible" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "schema" in value;
    isInstance = isInstance && "uiSchema" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function V1DetailAddonResponseFromJSON(json: any): V1DetailAddonResponse {
    return V1DetailAddonResponseFromJSONTyped(json, false);
}

export function V1DetailAddonResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1DetailAddonResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'annotations': !exists(json, 'annotations') ? undefined : json['annotations'],
        'availableVersions': json['availableVersions'],
        'definitions': ((json['definitions'] as Array<any>).map(V1AddonDefinitionFromJSON)),
        'dependencies': !exists(json, 'dependencies') ? undefined : ((json['dependencies'] as Array<any>).map(AddonDependencyFromJSON)),
        'deployTo': !exists(json, 'deployTo') ? undefined : AddonDeployToFromJSON(json['deployTo']),
        'description': json['description'],
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
        'icon': json['icon'],
        'invisible': json['invisible'],
        'name': json['name'],
        'needNamespace': !exists(json, 'needNamespace') ? undefined : json['needNamespace'],
        'registryName': !exists(json, 'registryName') ? undefined : json['registryName'],
        'schema': json['schema'],
        'system': !exists(json, 'system') ? undefined : AddonSystemRequirementsFromJSON(json['system']),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'uiSchema': ((json['uiSchema'] as Array<any>).map(SchemaUIParameterFromJSON)),
        'url': !exists(json, 'url') ? undefined : json['url'],
        'uxPlugins': !exists(json, 'uxPlugins') ? undefined : json['uxPlugins'],
        'version': json['version'],
    };
}

export function V1DetailAddonResponseToJSON(value?: V1DetailAddonResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'annotations': value.annotations,
        'availableVersions': value.availableVersions,
        'definitions': ((value.definitions as Array<any>).map(V1AddonDefinitionToJSON)),
        'dependencies': value.dependencies === undefined ? undefined : ((value.dependencies as Array<any>).map(AddonDependencyToJSON)),
        'deployTo': AddonDeployToToJSON(value.deployTo),
        'description': value.description,
        'detail': value.detail,
        'icon': value.icon,
        'invisible': value.invisible,
        'name': value.name,
        'needNamespace': value.needNamespace,
        'registryName': value.registryName,
        'schema': value.schema,
        'system': AddonSystemRequirementsToJSON(value.system),
        'tags': value.tags,
        'uiSchema': ((value.uiSchema as Array<any>).map(SchemaUIParameterToJSON)),
        'url': value.url,
        'uxPlugins': value.uxPlugins,
        'version': value.version,
    };
}

