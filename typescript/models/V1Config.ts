/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1HealthConfig } from './V1HealthConfig';
import {
    V1HealthConfigFromJSON,
    V1HealthConfigFromJSONTyped,
    V1HealthConfigToJSON,
} from './V1HealthConfig';

/**
 * 
 * @export
 * @interface V1Config
 */
export interface V1Config {
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    argsEscaped?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    attachStderr?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    attachStdin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    attachStdout?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1Config
     */
    cmd?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof V1Config
     */
    domainname?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1Config
     */
    entrypoint?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1Config
     */
    env?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof V1Config
     */
    exposedPorts?: { [key: string]: object; };
    /**
     * 
     * @type {V1HealthConfig}
     * @memberof V1Config
     */
    healthcheck?: V1HealthConfig;
    /**
     * 
     * @type {string}
     * @memberof V1Config
     */
    hostname?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Config
     */
    image?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1Config
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof V1Config
     */
    macAddress?: string;
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    networkDisabled?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1Config
     */
    onBuild?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    openStdin?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1Config
     */
    shell?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    stdinOnce?: boolean;
    /**
     * 
     * @type {string}
     * @memberof V1Config
     */
    stopSignal?: string;
    /**
     * 
     * @type {boolean}
     * @memberof V1Config
     */
    tty?: boolean;
    /**
     * 
     * @type {string}
     * @memberof V1Config
     */
    user?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof V1Config
     */
    volumes?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof V1Config
     */
    workingDir?: string;
}

/**
 * Check if a given object implements the V1Config interface.
 */
export function instanceOfV1Config(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1ConfigFromJSON(json: any): V1Config {
    return V1ConfigFromJSONTyped(json, false);
}

export function V1ConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Config {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'argsEscaped': !exists(json, 'ArgsEscaped') ? undefined : json['ArgsEscaped'],
        'attachStderr': !exists(json, 'AttachStderr') ? undefined : json['AttachStderr'],
        'attachStdin': !exists(json, 'AttachStdin') ? undefined : json['AttachStdin'],
        'attachStdout': !exists(json, 'AttachStdout') ? undefined : json['AttachStdout'],
        'cmd': !exists(json, 'Cmd') ? undefined : json['Cmd'],
        'domainname': !exists(json, 'Domainname') ? undefined : json['Domainname'],
        'entrypoint': !exists(json, 'Entrypoint') ? undefined : json['Entrypoint'],
        'env': !exists(json, 'Env') ? undefined : json['Env'],
        'exposedPorts': !exists(json, 'ExposedPorts') ? undefined : json['ExposedPorts'],
        'healthcheck': !exists(json, 'Healthcheck') ? undefined : V1HealthConfigFromJSON(json['Healthcheck']),
        'hostname': !exists(json, 'Hostname') ? undefined : json['Hostname'],
        'image': !exists(json, 'Image') ? undefined : json['Image'],
        'labels': !exists(json, 'Labels') ? undefined : json['Labels'],
        'macAddress': !exists(json, 'MacAddress') ? undefined : json['MacAddress'],
        'networkDisabled': !exists(json, 'NetworkDisabled') ? undefined : json['NetworkDisabled'],
        'onBuild': !exists(json, 'OnBuild') ? undefined : json['OnBuild'],
        'openStdin': !exists(json, 'OpenStdin') ? undefined : json['OpenStdin'],
        'shell': !exists(json, 'Shell') ? undefined : json['Shell'],
        'stdinOnce': !exists(json, 'StdinOnce') ? undefined : json['StdinOnce'],
        'stopSignal': !exists(json, 'StopSignal') ? undefined : json['StopSignal'],
        'tty': !exists(json, 'Tty') ? undefined : json['Tty'],
        'user': !exists(json, 'User') ? undefined : json['User'],
        'volumes': !exists(json, 'Volumes') ? undefined : json['Volumes'],
        'workingDir': !exists(json, 'WorkingDir') ? undefined : json['WorkingDir'],
    };
}

export function V1ConfigToJSON(value?: V1Config | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ArgsEscaped': value.argsEscaped,
        'AttachStderr': value.attachStderr,
        'AttachStdin': value.attachStdin,
        'AttachStdout': value.attachStdout,
        'Cmd': value.cmd,
        'Domainname': value.domainname,
        'Entrypoint': value.entrypoint,
        'Env': value.env,
        'ExposedPorts': value.exposedPorts,
        'Healthcheck': V1HealthConfigToJSON(value.healthcheck),
        'Hostname': value.hostname,
        'Image': value.image,
        'Labels': value.labels,
        'MacAddress': value.macAddress,
        'NetworkDisabled': value.networkDisabled,
        'OnBuild': value.onBuild,
        'OpenStdin': value.openStdin,
        'Shell': value.shell,
        'StdinOnce': value.stdinOnce,
        'StopSignal': value.stopSignal,
        'Tty': value.tty,
        'User': value.user,
        'Volumes': value.volumes,
        'WorkingDir': value.workingDir,
    };
}

