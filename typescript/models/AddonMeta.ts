/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddonDependency } from './AddonDependency';
import {
    AddonDependencyFromJSON,
    AddonDependencyFromJSONTyped,
    AddonDependencyToJSON,
} from './AddonDependency';
import type { AddonDeployTo } from './AddonDeployTo';
import {
    AddonDeployToFromJSON,
    AddonDeployToFromJSONTyped,
    AddonDeployToToJSON,
} from './AddonDeployTo';
import type { AddonSystemRequirements } from './AddonSystemRequirements';
import {
    AddonSystemRequirementsFromJSON,
    AddonSystemRequirementsFromJSONTyped,
    AddonSystemRequirementsToJSON,
} from './AddonSystemRequirements';

/**
 * 
 * @export
 * @interface AddonMeta
 */
export interface AddonMeta {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AddonMeta
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {Array<AddonDependency>}
     * @memberof AddonMeta
     */
    dependencies?: Array<AddonDependency>;
    /**
     * 
     * @type {AddonDeployTo}
     * @memberof AddonMeta
     */
    deployTo?: AddonDeployTo;
    /**
     * 
     * @type {string}
     * @memberof AddonMeta
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof AddonMeta
     */
    icon: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddonMeta
     */
    invisible: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddonMeta
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonMeta
     */
    needNamespace?: Array<string>;
    /**
     * 
     * @type {AddonSystemRequirements}
     * @memberof AddonMeta
     */
    system?: AddonSystemRequirements;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonMeta
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AddonMeta
     */
    url?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AddonMeta
     */
    uxPlugins?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof AddonMeta
     */
    version: string;
}

/**
 * Check if a given object implements the AddonMeta interface.
 */
export function instanceOfAddonMeta(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "invisible" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function AddonMetaFromJSON(json: any): AddonMeta {
    return AddonMetaFromJSONTyped(json, false);
}

export function AddonMetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddonMeta {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'annotations': !exists(json, 'annotations') ? undefined : json['annotations'],
        'dependencies': !exists(json, 'dependencies') ? undefined : ((json['dependencies'] as Array<any>).map(AddonDependencyFromJSON)),
        'deployTo': !exists(json, 'deployTo') ? undefined : AddonDeployToFromJSON(json['deployTo']),
        'description': json['description'],
        'icon': json['icon'],
        'invisible': json['invisible'],
        'name': json['name'],
        'needNamespace': !exists(json, 'needNamespace') ? undefined : json['needNamespace'],
        'system': !exists(json, 'system') ? undefined : AddonSystemRequirementsFromJSON(json['system']),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'uxPlugins': !exists(json, 'uxPlugins') ? undefined : json['uxPlugins'],
        'version': json['version'],
    };
}

export function AddonMetaToJSON(value?: AddonMeta | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'annotations': value.annotations,
        'dependencies': value.dependencies === undefined ? undefined : ((value.dependencies as Array<any>).map(AddonDependencyToJSON)),
        'deployTo': AddonDeployToToJSON(value.deployTo),
        'description': value.description,
        'icon': value.icon,
        'invisible': value.invisible,
        'name': value.name,
        'needNamespace': value.needNamespace,
        'system': AddonSystemRequirementsToJSON(value.system),
        'tags': value.tags,
        'url': value.url,
        'uxPlugins': value.uxPlugins,
        'version': value.version,
    };
}

