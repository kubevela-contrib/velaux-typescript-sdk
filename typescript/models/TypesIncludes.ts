/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TypesPermission } from './TypesPermission';
import {
    TypesPermissionFromJSON,
    TypesPermissionFromJSONTyped,
    TypesPermissionToJSON,
} from './TypesPermission';
import type { TypesWorkspace } from './TypesWorkspace';
import {
    TypesWorkspaceFromJSON,
    TypesWorkspaceFromJSONTyped,
    TypesWorkspaceToJSON,
} from './TypesWorkspace';

/**
 * 
 * @export
 * @interface TypesIncludes
 */
export interface TypesIncludes {
    /**
     * 
     * @type {string}
     * @memberof TypesIncludes
     */
    catalog?: string;
    /**
     * 
     * @type {string}
     * @memberof TypesIncludes
     */
    icon: string;
    /**
     * 
     * @type {string}
     * @memberof TypesIncludes
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof TypesIncludes
     */
    name: string;
    /**
     * 
     * @type {TypesPermission}
     * @memberof TypesIncludes
     */
    permission?: TypesPermission;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypesIncludes
     */
    relatedRoute: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TypesIncludes
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof TypesIncludes
     */
    type: string;
    /**
     * 
     * @type {TypesWorkspace}
     * @memberof TypesIncludes
     */
    workspace: TypesWorkspace;
}

/**
 * Check if a given object implements the TypesIncludes interface.
 */
export function instanceOfTypesIncludes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "relatedRoute" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "workspace" in value;

    return isInstance;
}

export function TypesIncludesFromJSON(json: any): TypesIncludes {
    return TypesIncludesFromJSONTyped(json, false);
}

export function TypesIncludesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesIncludes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'catalog': !exists(json, 'catalog') ? undefined : json['catalog'],
        'icon': json['icon'],
        'label': json['label'],
        'name': json['name'],
        'permission': !exists(json, 'permission') ? undefined : TypesPermissionFromJSON(json['permission']),
        'relatedRoute': json['relatedRoute'],
        'to': json['to'],
        'type': json['type'],
        'workspace': TypesWorkspaceFromJSON(json['workspace']),
    };
}

export function TypesIncludesToJSON(value?: TypesIncludes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'catalog': value.catalog,
        'icon': value.icon,
        'label': value.label,
        'name': value.name,
        'permission': TypesPermissionToJSON(value.permission),
        'relatedRoute': value.relatedRoute,
        'to': value.to,
        'type': value.type,
        'workspace': TypesWorkspaceToJSON(value.workspace),
    };
}

