/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemaUIParameter } from './SchemaUIParameter';
import {
    SchemaUIParameterFromJSON,
    SchemaUIParameterFromJSONTyped,
    SchemaUIParameterToJSON,
} from './SchemaUIParameter';

/**
 * 
 * @export
 * @interface V1ConfigTemplateDetail
 */
export interface V1ConfigTemplateDetail {
    /**
     * 
     * @type {string}
     * @memberof V1ConfigTemplateDetail
     */
    alias: string;
    /**
     * 
     * @type {Date}
     * @memberof V1ConfigTemplateDetail
     */
    createTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigTemplateDetail
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigTemplateDetail
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigTemplateDetail
     */
    namespace: string;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigTemplateDetail
     */
    schema: string;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigTemplateDetail
     */
    scope: string;
    /**
     * 
     * @type {boolean}
     * @memberof V1ConfigTemplateDetail
     */
    sensitive: boolean;
    /**
     * 
     * @type {Array<SchemaUIParameter>}
     * @memberof V1ConfigTemplateDetail
     */
    uiSchema: Array<SchemaUIParameter>;
}

/**
 * Check if a given object implements the V1ConfigTemplateDetail interface.
 */
export function instanceOfV1ConfigTemplateDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "namespace" in value;
    isInstance = isInstance && "schema" in value;
    isInstance = isInstance && "scope" in value;
    isInstance = isInstance && "sensitive" in value;
    isInstance = isInstance && "uiSchema" in value;

    return isInstance;
}

export function V1ConfigTemplateDetailFromJSON(json: any): V1ConfigTemplateDetail {
    return V1ConfigTemplateDetailFromJSONTyped(json, false);
}

export function V1ConfigTemplateDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ConfigTemplateDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'createTime': (new Date(json['createTime'])),
        'description': json['description'],
        'name': json['name'],
        'namespace': json['namespace'],
        'schema': json['schema'],
        'scope': json['scope'],
        'sensitive': json['sensitive'],
        'uiSchema': ((json['uiSchema'] as Array<any>).map(SchemaUIParameterFromJSON)),
    };
}

export function V1ConfigTemplateDetailToJSON(value?: V1ConfigTemplateDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'createTime': (value.createTime.toISOString()),
        'description': value.description,
        'name': value.name,
        'namespace': value.namespace,
        'schema': value.schema,
        'scope': value.scope,
        'sensitive': value.sensitive,
        'uiSchema': ((value.uiSchema as Array<any>).map(SchemaUIParameterToJSON)),
    };
}

