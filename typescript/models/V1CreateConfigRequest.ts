/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1NamespacedName } from './V1NamespacedName';
import {
    V1NamespacedNameFromJSON,
    V1NamespacedNameFromJSONTyped,
    V1NamespacedNameToJSON,
} from './V1NamespacedName';

/**
 * 
 * @export
 * @interface V1CreateConfigRequest
 */
export interface V1CreateConfigRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateConfigRequest
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateConfigRequest
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateConfigRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateConfigRequest
     */
    properties?: string;
    /**
     * 
     * @type {V1NamespacedName}
     * @memberof V1CreateConfigRequest
     */
    template: V1NamespacedName;
}

/**
 * Check if a given object implements the V1CreateConfigRequest interface.
 */
export function instanceOfV1CreateConfigRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "template" in value;

    return isInstance;
}

export function V1CreateConfigRequestFromJSON(json: any): V1CreateConfigRequest {
    return V1CreateConfigRequestFromJSONTyped(json, false);
}

export function V1CreateConfigRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CreateConfigRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'description': json['description'],
        'name': json['name'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'template': V1NamespacedNameFromJSON(json['template']),
    };
}

export function V1CreateConfigRequestToJSON(value?: V1CreateConfigRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'description': value.description,
        'name': value.name,
        'properties': value.properties,
        'template': V1NamespacedNameToJSON(value.template),
    };
}

