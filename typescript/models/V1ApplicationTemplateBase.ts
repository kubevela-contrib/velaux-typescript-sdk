/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ApplicationTemplateVersion } from './V1ApplicationTemplateVersion';
import {
    V1ApplicationTemplateVersionFromJSON,
    V1ApplicationTemplateVersionFromJSONTyped,
    V1ApplicationTemplateVersionToJSON,
} from './V1ApplicationTemplateVersion';

/**
 * 
 * @export
 * @interface V1ApplicationTemplateBase
 */
export interface V1ApplicationTemplateBase {
    /**
     * 
     * @type {Date}
     * @memberof V1ApplicationTemplateBase
     */
    createTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationTemplateBase
     */
    templateName: string;
    /**
     * 
     * @type {Date}
     * @memberof V1ApplicationTemplateBase
     */
    updateTime: Date;
    /**
     * 
     * @type {Array<V1ApplicationTemplateVersion>}
     * @memberof V1ApplicationTemplateBase
     */
    versions?: Array<V1ApplicationTemplateVersion>;
}

/**
 * Check if a given object implements the V1ApplicationTemplateBase interface.
 */
export function instanceOfV1ApplicationTemplateBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "templateName" in value;
    isInstance = isInstance && "updateTime" in value;

    return isInstance;
}

export function V1ApplicationTemplateBaseFromJSON(json: any): V1ApplicationTemplateBase {
    return V1ApplicationTemplateBaseFromJSONTyped(json, false);
}

export function V1ApplicationTemplateBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ApplicationTemplateBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createTime': (new Date(json['createTime'])),
        'templateName': json['templateName'],
        'updateTime': (new Date(json['updateTime'])),
        'versions': !exists(json, 'versions') ? undefined : ((json['versions'] as Array<any>).map(V1ApplicationTemplateVersionFromJSON)),
    };
}

export function V1ApplicationTemplateBaseToJSON(value?: V1ApplicationTemplateBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createTime': (value.createTime.toISOString()),
        'templateName': value.templateName,
        'updateTime': (value.updateTime.toISOString()),
        'versions': value.versions === undefined ? undefined : ((value.versions as Array<any>).map(V1ApplicationTemplateVersionToJSON)),
    };
}

