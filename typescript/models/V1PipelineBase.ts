/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelWorkflowSpec } from './ModelWorkflowSpec';
import {
    ModelWorkflowSpecFromJSON,
    ModelWorkflowSpecFromJSONTyped,
    ModelWorkflowSpecToJSON,
} from './ModelWorkflowSpec';
import type { V1NameAlias } from './V1NameAlias';
import {
    V1NameAliasFromJSON,
    V1NameAliasFromJSONTyped,
    V1NameAliasToJSON,
} from './V1NameAlias';

/**
 * 
 * @export
 * @interface V1PipelineBase
 */
export interface V1PipelineBase {
    /**
     * 
     * @type {string}
     * @memberof V1PipelineBase
     */
    alias: string;
    /**
     * 
     * @type {Date}
     * @memberof V1PipelineBase
     */
    createTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1PipelineBase
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof V1PipelineBase
     */
    name: string;
    /**
     * 
     * @type {V1NameAlias}
     * @memberof V1PipelineBase
     */
    project: V1NameAlias;
    /**
     * 
     * @type {ModelWorkflowSpec}
     * @memberof V1PipelineBase
     */
    spec: ModelWorkflowSpec;
}

/**
 * Check if a given object implements the V1PipelineBase interface.
 */
export function instanceOfV1PipelineBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "project" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function V1PipelineBaseFromJSON(json: any): V1PipelineBase {
    return V1PipelineBaseFromJSONTyped(json, false);
}

export function V1PipelineBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PipelineBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'createTime': (new Date(json['createTime'])),
        'description': json['description'],
        'name': json['name'],
        'project': V1NameAliasFromJSON(json['project']),
        'spec': ModelWorkflowSpecFromJSON(json['spec']),
    };
}

export function V1PipelineBaseToJSON(value?: V1PipelineBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'createTime': (value.createTime.toISOString()),
        'description': value.description,
        'name': value.name,
        'project': V1NameAliasToJSON(value.project),
        'spec': ModelWorkflowSpecToJSON(value.spec),
    };
}

