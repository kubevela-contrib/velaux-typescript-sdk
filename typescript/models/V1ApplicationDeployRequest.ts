/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelCodeInfo } from './ModelCodeInfo';
import {
    ModelCodeInfoFromJSON,
    ModelCodeInfoFromJSONTyped,
    ModelCodeInfoToJSON,
} from './ModelCodeInfo';
import type { ModelImageInfo } from './ModelImageInfo';
import {
    ModelImageInfoFromJSON,
    ModelImageInfoFromJSONTyped,
    ModelImageInfoToJSON,
} from './ModelImageInfo';

/**
 * 
 * @export
 * @interface V1ApplicationDeployRequest
 */
export interface V1ApplicationDeployRequest {
    /**
     * 
     * @type {ModelCodeInfo}
     * @memberof V1ApplicationDeployRequest
     */
    codeInfo?: ModelCodeInfo;
    /**
     * 
     * @type {boolean}
     * @memberof V1ApplicationDeployRequest
     */
    force: boolean;
    /**
     * 
     * @type {ModelImageInfo}
     * @memberof V1ApplicationDeployRequest
     */
    imageInfo?: ModelImageInfo;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationDeployRequest
     */
    note: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationDeployRequest
     */
    triggerType: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationDeployRequest
     */
    workflowName: string;
}

/**
 * Check if a given object implements the V1ApplicationDeployRequest interface.
 */
export function instanceOfV1ApplicationDeployRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "force" in value;
    isInstance = isInstance && "note" in value;
    isInstance = isInstance && "triggerType" in value;
    isInstance = isInstance && "workflowName" in value;

    return isInstance;
}

export function V1ApplicationDeployRequestFromJSON(json: any): V1ApplicationDeployRequest {
    return V1ApplicationDeployRequestFromJSONTyped(json, false);
}

export function V1ApplicationDeployRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ApplicationDeployRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'codeInfo': !exists(json, 'codeInfo') ? undefined : ModelCodeInfoFromJSON(json['codeInfo']),
        'force': json['force'],
        'imageInfo': !exists(json, 'imageInfo') ? undefined : ModelImageInfoFromJSON(json['imageInfo']),
        'note': json['note'],
        'triggerType': json['triggerType'],
        'workflowName': json['workflowName'],
    };
}

export function V1ApplicationDeployRequestToJSON(value?: V1ApplicationDeployRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'codeInfo': ModelCodeInfoToJSON(value.codeInfo),
        'force': value.force,
        'imageInfo': ModelImageInfoToJSON(value.imageInfo),
        'note': value.note,
        'triggerType': value.triggerType,
        'workflowName': value.workflowName,
    };
}

