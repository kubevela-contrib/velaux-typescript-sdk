/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemaCondition } from './SchemaCondition';
import {
    SchemaConditionFromJSON,
    SchemaConditionFromJSONTyped,
    SchemaConditionToJSON,
} from './SchemaCondition';
import type { SchemaGroupOption } from './SchemaGroupOption';
import {
    SchemaGroupOptionFromJSON,
    SchemaGroupOptionFromJSONTyped,
    SchemaGroupOptionToJSON,
} from './SchemaGroupOption';
import type { SchemaStyle } from './SchemaStyle';
import {
    SchemaStyleFromJSON,
    SchemaStyleFromJSONTyped,
    SchemaStyleToJSON,
} from './SchemaStyle';
import type { SchemaValidate } from './SchemaValidate';
import {
    SchemaValidateFromJSON,
    SchemaValidateFromJSONTyped,
    SchemaValidateToJSON,
} from './SchemaValidate';

/**
 * 
 * @export
 * @interface SchemaUIParameter
 */
export interface SchemaUIParameter {
    /**
     * 
     * @type {boolean}
     * @memberof SchemaUIParameter
     */
    additional?: boolean;
    /**
     * 
     * @type {SchemaUIParameter}
     * @memberof SchemaUIParameter
     */
    additionalParameter?: SchemaUIParameter;
    /**
     * 
     * @type {Array<SchemaCondition>}
     * @memberof SchemaUIParameter
     */
    conditions?: Array<SchemaCondition>;
    /**
     * 
     * @type {string}
     * @memberof SchemaUIParameter
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof SchemaUIParameter
     */
    disable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SchemaUIParameter
     */
    jsonKey: string;
    /**
     * 
     * @type {string}
     * @memberof SchemaUIParameter
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof SchemaUIParameter
     */
    sort: number;
    /**
     * 
     * @type {SchemaStyle}
     * @memberof SchemaUIParameter
     */
    style?: SchemaStyle;
    /**
     * 
     * @type {Array<SchemaGroupOption>}
     * @memberof SchemaUIParameter
     */
    subParameterGroupOption?: Array<SchemaGroupOption>;
    /**
     * 
     * @type {Array<SchemaUIParameter>}
     * @memberof SchemaUIParameter
     */
    subParameters?: Array<SchemaUIParameter>;
    /**
     * 
     * @type {string}
     * @memberof SchemaUIParameter
     */
    uiType: string;
    /**
     * 
     * @type {SchemaValidate}
     * @memberof SchemaUIParameter
     */
    validate?: SchemaValidate;
}

/**
 * Check if a given object implements the SchemaUIParameter interface.
 */
export function instanceOfSchemaUIParameter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "jsonKey" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "sort" in value;
    isInstance = isInstance && "uiType" in value;

    return isInstance;
}

export function SchemaUIParameterFromJSON(json: any): SchemaUIParameter {
    return SchemaUIParameterFromJSONTyped(json, false);
}

export function SchemaUIParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaUIParameter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'additional': !exists(json, 'additional') ? undefined : json['additional'],
        'additionalParameter': !exists(json, 'additionalParameter') ? undefined : SchemaUIParameterFromJSON(json['additionalParameter']),
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(SchemaConditionFromJSON)),
        'description': json['description'],
        'disable': !exists(json, 'disable') ? undefined : json['disable'],
        'jsonKey': json['jsonKey'],
        'label': json['label'],
        'sort': json['sort'],
        'style': !exists(json, 'style') ? undefined : SchemaStyleFromJSON(json['style']),
        'subParameterGroupOption': !exists(json, 'subParameterGroupOption') ? undefined : ((json['subParameterGroupOption'] as Array<any>).map(SchemaGroupOptionFromJSON)),
        'subParameters': !exists(json, 'subParameters') ? undefined : ((json['subParameters'] as Array<any>).map(SchemaUIParameterFromJSON)),
        'uiType': json['uiType'],
        'validate': !exists(json, 'validate') ? undefined : SchemaValidateFromJSON(json['validate']),
    };
}

export function SchemaUIParameterToJSON(value?: SchemaUIParameter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'additional': value.additional,
        'additionalParameter': SchemaUIParameterToJSON(value.additionalParameter),
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(SchemaConditionToJSON)),
        'description': value.description,
        'disable': value.disable,
        'jsonKey': value.jsonKey,
        'label': value.label,
        'sort': value.sort,
        'style': SchemaStyleToJSON(value.style),
        'subParameterGroupOption': value.subParameterGroupOption === undefined ? undefined : ((value.subParameterGroupOption as Array<any>).map(SchemaGroupOptionToJSON)),
        'subParameters': value.subParameters === undefined ? undefined : ((value.subParameters as Array<any>).map(SchemaUIParameterToJSON)),
        'uiType': value.uiType,
        'validate': SchemaValidateToJSON(value.validate),
    };
}

