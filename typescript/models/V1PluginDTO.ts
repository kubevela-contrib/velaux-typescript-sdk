/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TypesIncludes } from './TypesIncludes';
import {
    TypesIncludesFromJSON,
    TypesIncludesFromJSONTyped,
    TypesIncludesToJSON,
} from './TypesIncludes';
import type { TypesInfo } from './TypesInfo';
import {
    TypesInfoFromJSON,
    TypesInfoFromJSONTyped,
    TypesInfoToJSON,
} from './TypesInfo';

/**
 * 
 * @export
 * @interface V1PluginDTO
 */
export interface V1PluginDTO {
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    baseURL: string;
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    defaultNavURL: string;
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    id: string;
    /**
     * 
     * @type {Array<TypesIncludes>}
     * @memberof V1PluginDTO
     */
    includes: Array<TypesIncludes>;
    /**
     * 
     * @type {TypesInfo}
     * @memberof V1PluginDTO
     */
    info: TypesInfo;
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    module: string;
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    subType: string;
    /**
     * 
     * @type {string}
     * @memberof V1PluginDTO
     */
    type: string;
}

/**
 * Check if a given object implements the V1PluginDTO interface.
 */
export function instanceOfV1PluginDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "baseURL" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "defaultNavURL" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "includes" in value;
    isInstance = isInstance && "info" in value;
    isInstance = isInstance && "module" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "subType" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function V1PluginDTOFromJSON(json: any): V1PluginDTO {
    return V1PluginDTOFromJSONTyped(json, false);
}

export function V1PluginDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PluginDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'baseURL': json['baseURL'],
        'category': json['category'],
        'defaultNavURL': json['defaultNavURL'],
        'id': json['id'],
        'includes': ((json['includes'] as Array<any>).map(TypesIncludesFromJSON)),
        'info': TypesInfoFromJSON(json['info']),
        'module': json['module'],
        'name': json['name'],
        'subType': json['subType'],
        'type': json['type'],
    };
}

export function V1PluginDTOToJSON(value?: V1PluginDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'baseURL': value.baseURL,
        'category': value.category,
        'defaultNavURL': value.defaultNavURL,
        'id': value.id,
        'includes': ((value.includes as Array<any>).map(TypesIncludesToJSON)),
        'info': TypesInfoToJSON(value.info),
        'module': value.module,
        'name': value.name,
        'subType': value.subType,
        'type': value.type,
    };
}

