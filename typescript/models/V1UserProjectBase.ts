/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1NameAlias } from './V1NameAlias';
import {
    V1NameAliasFromJSON,
    V1NameAliasFromJSONTyped,
    V1NameAliasToJSON,
} from './V1NameAlias';

/**
 * 
 * @export
 * @interface V1UserProjectBase
 */
export interface V1UserProjectBase {
    /**
     * 
     * @type {string}
     * @memberof V1UserProjectBase
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof V1UserProjectBase
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof V1UserProjectBase
     */
    joinTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1UserProjectBase
     */
    name: string;
    /**
     * 
     * @type {V1NameAlias}
     * @memberof V1UserProjectBase
     */
    owner?: V1NameAlias;
    /**
     * 
     * @type {Array<V1NameAlias>}
     * @memberof V1UserProjectBase
     */
    roles: Array<V1NameAlias>;
}

/**
 * Check if a given object implements the V1UserProjectBase interface.
 */
export function instanceOfV1UserProjectBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "joinTime" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "roles" in value;

    return isInstance;
}

export function V1UserProjectBaseFromJSON(json: any): V1UserProjectBase {
    return V1UserProjectBaseFromJSONTyped(json, false);
}

export function V1UserProjectBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1UserProjectBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'description': json['description'],
        'joinTime': (new Date(json['joinTime'])),
        'name': json['name'],
        'owner': !exists(json, 'owner') ? undefined : V1NameAliasFromJSON(json['owner']),
        'roles': ((json['roles'] as Array<any>).map(V1NameAliasFromJSON)),
    };
}

export function V1UserProjectBaseToJSON(value?: V1UserProjectBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'description': value.description,
        'joinTime': (value.joinTime.toISOString()),
        'name': value.name,
        'owner': V1NameAliasToJSON(value.owner),
        'roles': ((value.roles as Array<any>).map(V1NameAliasToJSON)),
    };
}

