/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelWorkflowStepBase } from './ModelWorkflowStepBase';
import {
    ModelWorkflowStepBaseFromJSON,
    ModelWorkflowStepBaseFromJSONTyped,
    ModelWorkflowStepBaseToJSON,
} from './ModelWorkflowStepBase';
import type { V1alpha1InputItem } from './V1alpha1InputItem';
import {
    V1alpha1InputItemFromJSON,
    V1alpha1InputItemFromJSONTyped,
    V1alpha1InputItemToJSON,
} from './V1alpha1InputItem';
import type { V1alpha1OutputItem } from './V1alpha1OutputItem';
import {
    V1alpha1OutputItemFromJSON,
    V1alpha1OutputItemFromJSONTyped,
    V1alpha1OutputItemToJSON,
} from './V1alpha1OutputItem';
import type { V1alpha1WorkflowStepMeta } from './V1alpha1WorkflowStepMeta';
import {
    V1alpha1WorkflowStepMetaFromJSON,
    V1alpha1WorkflowStepMetaFromJSONTyped,
    V1alpha1WorkflowStepMetaToJSON,
} from './V1alpha1WorkflowStepMeta';

/**
 * 
 * @export
 * @interface ModelWorkflowStep
 */
export interface ModelWorkflowStep {
    /**
     * 
     * @type {string}
     * @memberof ModelWorkflowStep
     */
    alias: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelWorkflowStep
     */
    dependsOn: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ModelWorkflowStep
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ModelWorkflowStep
     */
    _if?: string;
    /**
     * 
     * @type {Array<V1alpha1InputItem>}
     * @memberof ModelWorkflowStep
     */
    inputs?: Array<V1alpha1InputItem>;
    /**
     * 
     * @type {V1alpha1WorkflowStepMeta}
     * @memberof ModelWorkflowStep
     */
    meta?: V1alpha1WorkflowStepMeta;
    /**
     * 
     * @type {string}
     * @memberof ModelWorkflowStep
     */
    mode?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelWorkflowStep
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ModelWorkflowStep
     */
    orderIndex: number;
    /**
     * 
     * @type {Array<V1alpha1OutputItem>}
     * @memberof ModelWorkflowStep
     */
    outputs?: Array<V1alpha1OutputItem>;
    /**
     * 
     * @type {object}
     * @memberof ModelWorkflowStep
     */
    properties?: object;
    /**
     * 
     * @type {Array<ModelWorkflowStepBase>}
     * @memberof ModelWorkflowStep
     */
    subSteps?: Array<ModelWorkflowStepBase>;
    /**
     * 
     * @type {string}
     * @memberof ModelWorkflowStep
     */
    timeout?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelWorkflowStep
     */
    type: string;
}

/**
 * Check if a given object implements the ModelWorkflowStep interface.
 */
export function instanceOfModelWorkflowStep(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "dependsOn" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "orderIndex" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ModelWorkflowStepFromJSON(json: any): ModelWorkflowStep {
    return ModelWorkflowStepFromJSONTyped(json, false);
}

export function ModelWorkflowStepFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelWorkflowStep {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'dependsOn': json['dependsOn'],
        'description': json['description'],
        '_if': !exists(json, 'if') ? undefined : json['if'],
        'inputs': !exists(json, 'inputs') ? undefined : ((json['inputs'] as Array<any>).map(V1alpha1InputItemFromJSON)),
        'meta': !exists(json, 'meta') ? undefined : V1alpha1WorkflowStepMetaFromJSON(json['meta']),
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
        'name': json['name'],
        'orderIndex': json['orderIndex'],
        'outputs': !exists(json, 'outputs') ? undefined : ((json['outputs'] as Array<any>).map(V1alpha1OutputItemFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'subSteps': !exists(json, 'subSteps') ? undefined : ((json['subSteps'] as Array<any>).map(ModelWorkflowStepBaseFromJSON)),
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
        'type': json['type'],
    };
}

export function ModelWorkflowStepToJSON(value?: ModelWorkflowStep | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'dependsOn': value.dependsOn,
        'description': value.description,
        'if': value._if,
        'inputs': value.inputs === undefined ? undefined : ((value.inputs as Array<any>).map(V1alpha1InputItemToJSON)),
        'meta': V1alpha1WorkflowStepMetaToJSON(value.meta),
        'mode': value.mode,
        'name': value.name,
        'orderIndex': value.orderIndex,
        'outputs': value.outputs === undefined ? undefined : ((value.outputs as Array<any>).map(V1alpha1OutputItemToJSON)),
        'properties': value.properties,
        'subSteps': value.subSteps === undefined ? undefined : ((value.subSteps as Array<any>).map(ModelWorkflowStepBaseToJSON)),
        'timeout': value.timeout,
        'type': value.type,
    };
}

