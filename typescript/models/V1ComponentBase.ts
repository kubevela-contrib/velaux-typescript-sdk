/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommonWorkloadTypeDescriptor } from './CommonWorkloadTypeDescriptor';
import {
    CommonWorkloadTypeDescriptorFromJSON,
    CommonWorkloadTypeDescriptorFromJSONTyped,
    CommonWorkloadTypeDescriptorToJSON,
} from './CommonWorkloadTypeDescriptor';
import type { V1ApplicationTrait } from './V1ApplicationTrait';
import {
    V1ApplicationTraitFromJSON,
    V1ApplicationTraitFromJSONTyped,
    V1ApplicationTraitToJSON,
} from './V1ApplicationTrait';
import type { V1alpha1InputItem } from './V1alpha1InputItem';
import {
    V1alpha1InputItemFromJSON,
    V1alpha1InputItemFromJSONTyped,
    V1alpha1InputItemToJSON,
} from './V1alpha1InputItem';
import type { V1alpha1OutputItem } from './V1alpha1OutputItem';
import {
    V1alpha1OutputItemFromJSON,
    V1alpha1OutputItemFromJSONTyped,
    V1alpha1OutputItemToJSON,
} from './V1alpha1OutputItem';

/**
 * 
 * @export
 * @interface V1ComponentBase
 */
export interface V1ComponentBase {
    /**
     * 
     * @type {string}
     * @memberof V1ComponentBase
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof V1ComponentBase
     */
    componentType: string;
    /**
     * 
     * @type {Date}
     * @memberof V1ComponentBase
     */
    createTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1ComponentBase
     */
    creator?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1ComponentBase
     */
    dependsOn: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof V1ComponentBase
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof V1ComponentBase
     */
    icon?: string;
    /**
     * 
     * @type {Array<V1alpha1InputItem>}
     * @memberof V1ComponentBase
     */
    inputs?: Array<V1alpha1InputItem>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1ComponentBase
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof V1ComponentBase
     */
    main: boolean;
    /**
     * 
     * @type {string}
     * @memberof V1ComponentBase
     */
    name: string;
    /**
     * 
     * @type {Array<V1alpha1OutputItem>}
     * @memberof V1ComponentBase
     */
    outputs?: Array<V1alpha1OutputItem>;
    /**
     * 
     * @type {Array<V1ApplicationTrait>}
     * @memberof V1ComponentBase
     */
    traits: Array<V1ApplicationTrait>;
    /**
     * 
     * @type {Date}
     * @memberof V1ComponentBase
     */
    updateTime: Date;
    /**
     * 
     * @type {CommonWorkloadTypeDescriptor}
     * @memberof V1ComponentBase
     */
    workloadType?: CommonWorkloadTypeDescriptor;
}

/**
 * Check if a given object implements the V1ComponentBase interface.
 */
export function instanceOfV1ComponentBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "componentType" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "dependsOn" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "main" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "traits" in value;
    isInstance = isInstance && "updateTime" in value;

    return isInstance;
}

export function V1ComponentBaseFromJSON(json: any): V1ComponentBase {
    return V1ComponentBaseFromJSONTyped(json, false);
}

export function V1ComponentBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ComponentBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'componentType': json['componentType'],
        'createTime': (new Date(json['createTime'])),
        'creator': !exists(json, 'creator') ? undefined : json['creator'],
        'dependsOn': json['dependsOn'],
        'description': json['description'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'inputs': !exists(json, 'inputs') ? undefined : ((json['inputs'] as Array<any>).map(V1alpha1InputItemFromJSON)),
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'main': json['main'],
        'name': json['name'],
        'outputs': !exists(json, 'outputs') ? undefined : ((json['outputs'] as Array<any>).map(V1alpha1OutputItemFromJSON)),
        'traits': ((json['traits'] as Array<any>).map(V1ApplicationTraitFromJSON)),
        'updateTime': (new Date(json['updateTime'])),
        'workloadType': !exists(json, 'workloadType') ? undefined : CommonWorkloadTypeDescriptorFromJSON(json['workloadType']),
    };
}

export function V1ComponentBaseToJSON(value?: V1ComponentBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'componentType': value.componentType,
        'createTime': (value.createTime.toISOString()),
        'creator': value.creator,
        'dependsOn': value.dependsOn,
        'description': value.description,
        'icon': value.icon,
        'inputs': value.inputs === undefined ? undefined : ((value.inputs as Array<any>).map(V1alpha1InputItemToJSON)),
        'labels': value.labels,
        'main': value.main,
        'name': value.name,
        'outputs': value.outputs === undefined ? undefined : ((value.outputs as Array<any>).map(V1alpha1OutputItemToJSON)),
        'traits': ((value.traits as Array<any>).map(V1ApplicationTraitToJSON)),
        'updateTime': (value.updateTime.toISOString()),
        'workloadType': CommonWorkloadTypeDescriptorToJSON(value.workloadType),
    };
}

