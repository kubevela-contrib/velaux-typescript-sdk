/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SchemaCondition
 */
export interface SchemaCondition {
    /**
     * 
     * @type {string}
     * @memberof SchemaCondition
     */
    action?: string;
    /**
     * 
     * @type {string}
     * @memberof SchemaCondition
     */
    jsonKey: string;
    /**
     * 
     * @type {string}
     * @memberof SchemaCondition
     */
    op?: string;
    /**
     * 
     * @type {object}
     * @memberof SchemaCondition
     */
    value: object;
}

/**
 * Check if a given object implements the SchemaCondition interface.
 */
export function instanceOfSchemaCondition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "jsonKey" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function SchemaConditionFromJSON(json: any): SchemaCondition {
    return SchemaConditionFromJSONTyped(json, false);
}

export function SchemaConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': !exists(json, 'action') ? undefined : json['action'],
        'jsonKey': json['jsonKey'],
        'op': !exists(json, 'op') ? undefined : json['op'],
        'value': json['value'],
    };
}

export function SchemaConditionToJSON(value?: SchemaCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'jsonKey': value.jsonKey,
        'op': value.op,
        'value': value.value,
    };
}

