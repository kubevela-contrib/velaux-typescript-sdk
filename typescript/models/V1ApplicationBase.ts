/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ProjectBase } from './V1ProjectBase';
import {
    V1ProjectBaseFromJSON,
    V1ProjectBaseFromJSONTyped,
    V1ProjectBaseToJSON,
} from './V1ProjectBase';

/**
 * 
 * @export
 * @interface V1ApplicationBase
 */
export interface V1ApplicationBase {
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationBase
     */
    alias: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1ApplicationBase
     */
    annotations?: { [key: string]: string; };
    /**
     * 
     * @type {Date}
     * @memberof V1ApplicationBase
     */
    createTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationBase
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationBase
     */
    icon: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof V1ApplicationBase
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof V1ApplicationBase
     */
    name: string;
    /**
     * 
     * @type {V1ProjectBase}
     * @memberof V1ApplicationBase
     */
    project: V1ProjectBase;
    /**
     * 
     * @type {boolean}
     * @memberof V1ApplicationBase
     */
    readOnly?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof V1ApplicationBase
     */
    updateTime: Date;
}

/**
 * Check if a given object implements the V1ApplicationBase interface.
 */
export function instanceOfV1ApplicationBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "project" in value;
    isInstance = isInstance && "updateTime" in value;

    return isInstance;
}

export function V1ApplicationBaseFromJSON(json: any): V1ApplicationBase {
    return V1ApplicationBaseFromJSONTyped(json, false);
}

export function V1ApplicationBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ApplicationBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'annotations': !exists(json, 'annotations') ? undefined : json['annotations'],
        'createTime': (new Date(json['createTime'])),
        'description': json['description'],
        'icon': json['icon'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'name': json['name'],
        'project': V1ProjectBaseFromJSON(json['project']),
        'readOnly': !exists(json, 'readOnly') ? undefined : json['readOnly'],
        'updateTime': (new Date(json['updateTime'])),
    };
}

export function V1ApplicationBaseToJSON(value?: V1ApplicationBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'annotations': value.annotations,
        'createTime': (value.createTime.toISOString()),
        'description': value.description,
        'icon': value.icon,
        'labels': value.labels,
        'name': value.name,
        'project': V1ProjectBaseToJSON(value.project),
        'readOnly': value.readOnly,
        'updateTime': (value.updateTime.toISOString()),
    };
}

