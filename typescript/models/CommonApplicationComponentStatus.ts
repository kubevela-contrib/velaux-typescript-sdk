/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommonApplicationTraitStatus } from './CommonApplicationTraitStatus';
import {
    CommonApplicationTraitStatusFromJSON,
    CommonApplicationTraitStatusFromJSONTyped,
    CommonApplicationTraitStatusToJSON,
} from './CommonApplicationTraitStatus';
import type { CommonWorkloadGVK } from './CommonWorkloadGVK';
import {
    CommonWorkloadGVKFromJSON,
    CommonWorkloadGVKFromJSONTyped,
    CommonWorkloadGVKToJSON,
} from './CommonWorkloadGVK';
import type { V1ObjectReference } from './V1ObjectReference';
import {
    V1ObjectReferenceFromJSON,
    V1ObjectReferenceFromJSONTyped,
    V1ObjectReferenceToJSON,
} from './V1ObjectReference';

/**
 * 
 * @export
 * @interface CommonApplicationComponentStatus
 */
export interface CommonApplicationComponentStatus {
    /**
     * 
     * @type {string}
     * @memberof CommonApplicationComponentStatus
     */
    cluster?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonApplicationComponentStatus
     */
    env?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CommonApplicationComponentStatus
     */
    healthy: boolean;
    /**
     * 
     * @type {string}
     * @memberof CommonApplicationComponentStatus
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonApplicationComponentStatus
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CommonApplicationComponentStatus
     */
    namespace?: string;
    /**
     * 
     * @type {Array<V1ObjectReference>}
     * @memberof CommonApplicationComponentStatus
     */
    scopes?: Array<V1ObjectReference>;
    /**
     * 
     * @type {Array<CommonApplicationTraitStatus>}
     * @memberof CommonApplicationComponentStatus
     */
    traits?: Array<CommonApplicationTraitStatus>;
    /**
     * 
     * @type {CommonWorkloadGVK}
     * @memberof CommonApplicationComponentStatus
     */
    workloadDefinition?: CommonWorkloadGVK;
}

/**
 * Check if a given object implements the CommonApplicationComponentStatus interface.
 */
export function instanceOfCommonApplicationComponentStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "healthy" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function CommonApplicationComponentStatusFromJSON(json: any): CommonApplicationComponentStatus {
    return CommonApplicationComponentStatusFromJSONTyped(json, false);
}

export function CommonApplicationComponentStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonApplicationComponentStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cluster': !exists(json, 'cluster') ? undefined : json['cluster'],
        'env': !exists(json, 'env') ? undefined : json['env'],
        'healthy': json['healthy'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'name': json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'scopes': !exists(json, 'scopes') ? undefined : ((json['scopes'] as Array<any>).map(V1ObjectReferenceFromJSON)),
        'traits': !exists(json, 'traits') ? undefined : ((json['traits'] as Array<any>).map(CommonApplicationTraitStatusFromJSON)),
        'workloadDefinition': !exists(json, 'workloadDefinition') ? undefined : CommonWorkloadGVKFromJSON(json['workloadDefinition']),
    };
}

export function CommonApplicationComponentStatusToJSON(value?: CommonApplicationComponentStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cluster': value.cluster,
        'env': value.env,
        'healthy': value.healthy,
        'message': value.message,
        'name': value.name,
        'namespace': value.namespace,
        'scopes': value.scopes === undefined ? undefined : ((value.scopes as Array<any>).map(V1ObjectReferenceToJSON)),
        'traits': value.traits === undefined ? undefined : ((value.traits as Array<any>).map(CommonApplicationTraitStatusToJSON)),
        'workloadDefinition': CommonWorkloadGVKToJSON(value.workloadDefinition),
    };
}

