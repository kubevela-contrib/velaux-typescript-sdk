/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ComponentSelector } from './V1ComponentSelector';
import {
    V1ComponentSelectorFromJSON,
    V1ComponentSelectorFromJSONTyped,
    V1ComponentSelectorToJSON,
} from './V1ComponentSelector';
import type { V1EnvBindingTarget } from './V1EnvBindingTarget';
import {
    V1EnvBindingTargetFromJSON,
    V1EnvBindingTargetFromJSONTyped,
    V1EnvBindingTargetToJSON,
} from './V1EnvBindingTarget';
import type { V1NameAlias } from './V1NameAlias';
import {
    V1NameAliasFromJSON,
    V1NameAliasFromJSONTyped,
    V1NameAliasToJSON,
} from './V1NameAlias';

/**
 * 
 * @export
 * @interface V1EnvBindingBase
 */
export interface V1EnvBindingBase {
    /**
     * 
     * @type {string}
     * @memberof V1EnvBindingBase
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof V1EnvBindingBase
     */
    appDeployName: string;
    /**
     * 
     * @type {string}
     * @memberof V1EnvBindingBase
     */
    appDeployNamespace: string;
    /**
     * 
     * @type {V1ComponentSelector}
     * @memberof V1EnvBindingBase
     */
    componentSelector?: V1ComponentSelector;
    /**
     * 
     * @type {Date}
     * @memberof V1EnvBindingBase
     */
    createTime: Date;
    /**
     * 
     * @type {string}
     * @memberof V1EnvBindingBase
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof V1EnvBindingBase
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1EnvBindingBase
     */
    targetNames: Array<string>;
    /**
     * 
     * @type {Array<V1EnvBindingTarget>}
     * @memberof V1EnvBindingBase
     */
    targets?: Array<V1EnvBindingTarget>;
    /**
     * 
     * @type {Date}
     * @memberof V1EnvBindingBase
     */
    updateTime: Date;
    /**
     * 
     * @type {V1NameAlias}
     * @memberof V1EnvBindingBase
     */
    workflow: V1NameAlias;
}

/**
 * Check if a given object implements the V1EnvBindingBase interface.
 */
export function instanceOfV1EnvBindingBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appDeployName" in value;
    isInstance = isInstance && "appDeployNamespace" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "targetNames" in value;
    isInstance = isInstance && "updateTime" in value;
    isInstance = isInstance && "workflow" in value;

    return isInstance;
}

export function V1EnvBindingBaseFromJSON(json: any): V1EnvBindingBase {
    return V1EnvBindingBaseFromJSONTyped(json, false);
}

export function V1EnvBindingBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1EnvBindingBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alias': !exists(json, 'alias') ? undefined : json['alias'],
        'appDeployName': json['appDeployName'],
        'appDeployNamespace': json['appDeployNamespace'],
        'componentSelector': !exists(json, 'componentSelector') ? undefined : V1ComponentSelectorFromJSON(json['componentSelector']),
        'createTime': (new Date(json['createTime'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'name': json['name'],
        'targetNames': json['targetNames'],
        'targets': !exists(json, 'targets') ? undefined : ((json['targets'] as Array<any>).map(V1EnvBindingTargetFromJSON)),
        'updateTime': (new Date(json['updateTime'])),
        'workflow': V1NameAliasFromJSON(json['workflow']),
    };
}

export function V1EnvBindingBaseToJSON(value?: V1EnvBindingBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
        'appDeployName': value.appDeployName,
        'appDeployNamespace': value.appDeployNamespace,
        'componentSelector': V1ComponentSelectorToJSON(value.componentSelector),
        'createTime': (value.createTime.toISOString()),
        'description': value.description,
        'name': value.name,
        'targetNames': value.targetNames,
        'targets': value.targets === undefined ? undefined : ((value.targets as Array<any>).map(V1EnvBindingTargetToJSON)),
        'updateTime': (value.updateTime.toISOString()),
        'workflow': V1NameAliasToJSON(value.workflow),
    };
}

