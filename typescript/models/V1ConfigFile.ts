/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Config } from './V1Config';
import {
    V1ConfigFromJSON,
    V1ConfigFromJSONTyped,
    V1ConfigToJSON,
} from './V1Config';
import type { V1History } from './V1History';
import {
    V1HistoryFromJSON,
    V1HistoryFromJSONTyped,
    V1HistoryToJSON,
} from './V1History';
import type { V1RootFS } from './V1RootFS';
import {
    V1RootFSFromJSON,
    V1RootFSFromJSONTyped,
    V1RootFSToJSON,
} from './V1RootFS';

/**
 * 
 * @export
 * @interface V1ConfigFile
 */
export interface V1ConfigFile {
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    architecture: string;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    author?: string;
    /**
     * 
     * @type {V1Config}
     * @memberof V1ConfigFile
     */
    config: V1Config;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    container?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    dockerVersion?: string;
    /**
     * 
     * @type {Array<V1History>}
     * @memberof V1ConfigFile
     */
    history?: Array<V1History>;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    os: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1ConfigFile
     */
    osFeatures?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    osVersion?: string;
    /**
     * 
     * @type {V1RootFS}
     * @memberof V1ConfigFile
     */
    rootfs: V1RootFS;
    /**
     * 
     * @type {string}
     * @memberof V1ConfigFile
     */
    variant?: string;
}

/**
 * Check if a given object implements the V1ConfigFile interface.
 */
export function instanceOfV1ConfigFile(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "architecture" in value;
    isInstance = isInstance && "config" in value;
    isInstance = isInstance && "os" in value;
    isInstance = isInstance && "rootfs" in value;

    return isInstance;
}

export function V1ConfigFileFromJSON(json: any): V1ConfigFile {
    return V1ConfigFileFromJSONTyped(json, false);
}

export function V1ConfigFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ConfigFile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'architecture': json['architecture'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'config': V1ConfigFromJSON(json['config']),
        'container': !exists(json, 'container') ? undefined : json['container'],
        'created': !exists(json, 'created') ? undefined : json['created'],
        'dockerVersion': !exists(json, 'docker_version') ? undefined : json['docker_version'],
        'history': !exists(json, 'history') ? undefined : ((json['history'] as Array<any>).map(V1HistoryFromJSON)),
        'os': json['os'],
        'osFeatures': !exists(json, 'os.features') ? undefined : json['os.features'],
        'osVersion': !exists(json, 'os.version') ? undefined : json['os.version'],
        'rootfs': V1RootFSFromJSON(json['rootfs']),
        'variant': !exists(json, 'variant') ? undefined : json['variant'],
    };
}

export function V1ConfigFileToJSON(value?: V1ConfigFile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'architecture': value.architecture,
        'author': value.author,
        'config': V1ConfigToJSON(value.config),
        'container': value.container,
        'created': value.created,
        'docker_version': value.dockerVersion,
        'history': value.history === undefined ? undefined : ((value.history as Array<any>).map(V1HistoryToJSON)),
        'os': value.os,
        'os.features': value.osFeatures,
        'os.version': value.osVersion,
        'rootfs': V1RootFSToJSON(value.rootfs),
        'variant': value.variant,
    };
}

