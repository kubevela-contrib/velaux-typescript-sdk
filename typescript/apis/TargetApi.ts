/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1CreateTargetRequest,
  V1DetailTargetResponse,
  V1ListTargetResponse,
  V1UpdateTargetRequest,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1CreateTargetRequestFromJSON,
    V1CreateTargetRequestToJSON,
    V1DetailTargetResponseFromJSON,
    V1DetailTargetResponseToJSON,
    V1ListTargetResponseFromJSON,
    V1ListTargetResponseToJSON,
    V1UpdateTargetRequestFromJSON,
    V1UpdateTargetRequestToJSON,
} from '../models/index';

export interface CreateTargetRequest {
    body: V1CreateTargetRequest;
}

export interface DeleteTargetRequest {
    targetName: string;
}

export interface DetailTargetRequest {
    targetName: string;
}

export interface ListTargetsRequest {
    page?: number;
    pageSize?: number;
    project?: string;
}

export interface UpdateTargetRequest {
    targetName: string;
    body: V1UpdateTargetRequest;
}

/**
 *
 */
export class TargetApi extends runtime.BaseAPI {

    /**
     * create Target
     */
    async createTargetRaw(requestParameters: CreateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailTargetResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createTarget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/targets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateTargetRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailTargetResponseFromJSON(jsonValue));
    }

    /**
     * create Target
     */
    async createTarget(requestParameters: CreateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailTargetResponse> {
        const response = await this.createTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deletet Target
     */
    async deleteTargetRaw(requestParameters: DeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.targetName === null || requestParameters.targetName === undefined) {
            throw new runtime.RequiredError('targetName','Required parameter requestParameters.targetName was null or undefined when calling deleteTarget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/targets/{targetName}`.replace(`{${"targetName"}}`, encodeURIComponent(String(requestParameters.targetName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * deletet Target
     */
    async deleteTarget(requestParameters: DeleteTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail Target
     */
    async detailTargetRaw(requestParameters: DetailTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailTargetResponse>> {
        if (requestParameters.targetName === null || requestParameters.targetName === undefined) {
            throw new runtime.RequiredError('targetName','Required parameter requestParameters.targetName was null or undefined when calling detailTarget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/targets/{targetName}`.replace(`{${"targetName"}}`, encodeURIComponent(String(requestParameters.targetName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailTargetResponseFromJSON(jsonValue));
    }

    /**
     * detail Target
     */
    async detailTarget(requestParameters: DetailTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailTargetResponse> {
        const response = await this.detailTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list Target
     */
    async listTargetsRaw(requestParameters: ListTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListTargetResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/targets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListTargetResponseFromJSON(jsonValue));
    }

    /**
     * list Target
     */
    async listTargets(requestParameters: ListTargetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListTargetResponse> {
        const response = await this.listTargetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update application Target config
     */
    async updateTargetRaw(requestParameters: UpdateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailTargetResponse>> {
        if (requestParameters.targetName === null || requestParameters.targetName === undefined) {
            throw new runtime.RequiredError('targetName','Required parameter requestParameters.targetName was null or undefined when calling updateTarget.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateTarget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/targets/{targetName}`.replace(`{${"targetName"}}`, encodeURIComponent(String(requestParameters.targetName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateTargetRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailTargetResponseFromJSON(jsonValue));
    }

    /**
     * update application Target config
     */
    async updateTarget(requestParameters: UpdateTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailTargetResponse> {
        const response = await this.updateTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
