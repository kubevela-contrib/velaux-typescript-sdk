/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1AppCompareReq,
  V1AppCompareResponse,
  V1AppDryRunReq,
  V1AppDryRunResponse,
  V1AppResetResponse,
  V1ApplicationBase,
  V1ApplicationDeployRequest,
  V1ApplicationDeployResponse,
  V1ApplicationRollbackResponse,
  V1ApplicationStatisticsResponse,
  V1ApplicationStatusListResponse,
  V1ApplicationStatusResponse,
  V1ApplicationTemplateBase,
  V1ApplicationTrait,
  V1ApplicationTriggerBase,
  V1ComponentBase,
  V1ComponentListResponse,
  V1CreateApplicationEnvbindingRequest,
  V1CreateApplicationRequest,
  V1CreateApplicationTemplateRequest,
  V1CreateApplicationTraitRequest,
  V1CreateApplicationTriggerRequest,
  V1CreateComponentRequest,
  V1CreatePolicyRequest,
  V1CreateWorkflowRequest,
  V1DetailApplicationResponse,
  V1DetailComponentResponse,
  V1DetailPolicyResponse,
  V1DetailRevisionResponse,
  V1DetailWorkflowRecordResponse,
  V1DetailWorkflowResponse,
  V1EnvBinding,
  V1GetPipelineRunInputResponse,
  V1GetPipelineRunOutputResponse,
  V1ListApplicationEnvBinding,
  V1ListApplicationPolicy,
  V1ListApplicationResponse,
  V1ListApplicationTriggerResponse,
  V1ListRevisionsResponse,
  V1ListWorkflowRecordsResponse,
  V1ListWorkflowResponse,
  V1PolicyBase,
  V1UpdateApplicationComponentRequest,
  V1UpdateApplicationRequest,
  V1UpdateApplicationTraitRequest,
  V1UpdatePolicyRequest,
  V1UpdateWorkflowRequest,
  V1WorkflowRecordBase,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1AppCompareReqFromJSON,
    V1AppCompareReqToJSON,
    V1AppCompareResponseFromJSON,
    V1AppCompareResponseToJSON,
    V1AppDryRunReqFromJSON,
    V1AppDryRunReqToJSON,
    V1AppDryRunResponseFromJSON,
    V1AppDryRunResponseToJSON,
    V1AppResetResponseFromJSON,
    V1AppResetResponseToJSON,
    V1ApplicationBaseFromJSON,
    V1ApplicationBaseToJSON,
    V1ApplicationDeployRequestFromJSON,
    V1ApplicationDeployRequestToJSON,
    V1ApplicationDeployResponseFromJSON,
    V1ApplicationDeployResponseToJSON,
    V1ApplicationRollbackResponseFromJSON,
    V1ApplicationRollbackResponseToJSON,
    V1ApplicationStatisticsResponseFromJSON,
    V1ApplicationStatisticsResponseToJSON,
    V1ApplicationStatusListResponseFromJSON,
    V1ApplicationStatusListResponseToJSON,
    V1ApplicationStatusResponseFromJSON,
    V1ApplicationStatusResponseToJSON,
    V1ApplicationTemplateBaseFromJSON,
    V1ApplicationTemplateBaseToJSON,
    V1ApplicationTraitFromJSON,
    V1ApplicationTraitToJSON,
    V1ApplicationTriggerBaseFromJSON,
    V1ApplicationTriggerBaseToJSON,
    V1ComponentBaseFromJSON,
    V1ComponentBaseToJSON,
    V1ComponentListResponseFromJSON,
    V1ComponentListResponseToJSON,
    V1CreateApplicationEnvbindingRequestFromJSON,
    V1CreateApplicationEnvbindingRequestToJSON,
    V1CreateApplicationRequestFromJSON,
    V1CreateApplicationRequestToJSON,
    V1CreateApplicationTemplateRequestFromJSON,
    V1CreateApplicationTemplateRequestToJSON,
    V1CreateApplicationTraitRequestFromJSON,
    V1CreateApplicationTraitRequestToJSON,
    V1CreateApplicationTriggerRequestFromJSON,
    V1CreateApplicationTriggerRequestToJSON,
    V1CreateComponentRequestFromJSON,
    V1CreateComponentRequestToJSON,
    V1CreatePolicyRequestFromJSON,
    V1CreatePolicyRequestToJSON,
    V1CreateWorkflowRequestFromJSON,
    V1CreateWorkflowRequestToJSON,
    V1DetailApplicationResponseFromJSON,
    V1DetailApplicationResponseToJSON,
    V1DetailComponentResponseFromJSON,
    V1DetailComponentResponseToJSON,
    V1DetailPolicyResponseFromJSON,
    V1DetailPolicyResponseToJSON,
    V1DetailRevisionResponseFromJSON,
    V1DetailRevisionResponseToJSON,
    V1DetailWorkflowRecordResponseFromJSON,
    V1DetailWorkflowRecordResponseToJSON,
    V1DetailWorkflowResponseFromJSON,
    V1DetailWorkflowResponseToJSON,
    V1EnvBindingFromJSON,
    V1EnvBindingToJSON,
    V1GetPipelineRunInputResponseFromJSON,
    V1GetPipelineRunInputResponseToJSON,
    V1GetPipelineRunOutputResponseFromJSON,
    V1GetPipelineRunOutputResponseToJSON,
    V1ListApplicationEnvBindingFromJSON,
    V1ListApplicationEnvBindingToJSON,
    V1ListApplicationPolicyFromJSON,
    V1ListApplicationPolicyToJSON,
    V1ListApplicationResponseFromJSON,
    V1ListApplicationResponseToJSON,
    V1ListApplicationTriggerResponseFromJSON,
    V1ListApplicationTriggerResponseToJSON,
    V1ListRevisionsResponseFromJSON,
    V1ListRevisionsResponseToJSON,
    V1ListWorkflowRecordsResponseFromJSON,
    V1ListWorkflowRecordsResponseToJSON,
    V1ListWorkflowResponseFromJSON,
    V1ListWorkflowResponseToJSON,
    V1PolicyBaseFromJSON,
    V1PolicyBaseToJSON,
    V1UpdateApplicationComponentRequestFromJSON,
    V1UpdateApplicationComponentRequestToJSON,
    V1UpdateApplicationRequestFromJSON,
    V1UpdateApplicationRequestToJSON,
    V1UpdateApplicationTraitRequestFromJSON,
    V1UpdateApplicationTraitRequestToJSON,
    V1UpdatePolicyRequestFromJSON,
    V1UpdatePolicyRequestToJSON,
    V1UpdateWorkflowRequestFromJSON,
    V1UpdateWorkflowRequestToJSON,
    V1WorkflowRecordBaseFromJSON,
    V1WorkflowRecordBaseToJSON,
} from '../models/index';

export interface AddApplicationTraitRequest {
    appName: string;
    compName: string;
    body: V1CreateApplicationTraitRequest;
}

export interface ApplicationStatisticsRequest {
    appName: string;
}

export interface CompareAppRequest {
    appName: string;
    body: V1AppCompareReq;
}

export interface CreateApplicationRequest {
    body: V1CreateApplicationRequest;
}

export interface CreateApplicationEnvRequest {
    appName: string;
    body: V1CreateApplicationEnvbindingRequest;
}

export interface CreateApplicationPolicyRequest {
    appName: string;
    body: V1CreatePolicyRequest;
}

export interface CreateApplicationTriggerRequest {
    appName: string;
    body: V1CreateApplicationTriggerRequest;
}

export interface CreateComponentRequest {
    appName: string;
    body: V1CreateComponentRequest;
}

export interface CreateOrUpdateApplicationWorkflowRequest {
    appName: string;
    body: V1CreateWorkflowRequest;
}

export interface DeleteApplicationRequest {
    appName: string;
}

export interface DeleteApplicationEnvRequest {
    appName: string;
    envName: string;
}

export interface DeleteApplicationPolicyRequest {
    appName: string;
    policyName: string;
    force?: boolean;
}

export interface DeleteApplicationTraitRequest {
    appName: string;
    compName: string;
    traitType: string;
}

export interface DeleteApplicationTriggerRequest {
    appName: string;
    token: string;
}

export interface DeleteComponentRequest {
    appName: string;
    compName: string;
}

export interface DeleteWorkflowRequest {
    appName: string;
    workflowName: string;
}

export interface DeployApplicationRequest {
    appName: string;
    body: V1ApplicationDeployRequest;
}

export interface DetailApplicationRequest {
    appName: string;
}

export interface DetailApplicationPolicyRequest {
    appName: string;
    policyName: string;
}

export interface DetailApplicationRevisionRequest {
    appName: string;
    revision: string;
}

export interface DetailComponentRequest {
    appName: string;
    compName: string;
}

export interface DetailWorkflowRequest {
    appName: string;
    workflowName: string;
}

export interface DetailWorkflowRecordRequest {
    appName: string;
    workflowName: string;
    record: string;
}

export interface DryRunAppOrRevisionRequest {
    appName: string;
    body: V1AppDryRunReq;
}

export interface GetApplicationStatusRequest {
    appName: string;
    envName: string;
}

export interface GetApplicationStatusFromAllEnvsRequest {
    appName: string;
}

export interface GetWorkflowRecordInputsRequest {
    appName: string;
    workflowName: string;
    record: string;
    step: string;
}

export interface GetWorkflowRecordLogsRequest {
    appName: string;
    workflowName: string;
    record: string;
    step: string;
}

export interface GetWorkflowRecordOutputsRequest {
    appName: string;
    workflowName: string;
    record: string;
    step: string;
}

export interface ListApplicationComponentsRequest {
    appName: string;
    envName?: string;
}

export interface ListApplicationEnvsRequest {
    appName: string;
}

export interface ListApplicationPoliciesRequest {
    appName: string;
}

export interface ListApplicationRecordsRequest {
    appName: string;
}

export interface ListApplicationRevisionsRequest {
    appName: string;
    envName?: string;
    status?: string;
    page?: number;
    pageSize?: number;
}

export interface ListApplicationTriggersRequest {
    appName: string;
}

export interface ListApplicationWorkflowsRequest {
    appName: string;
}

export interface ListApplicationsRequest {
    query?: string;
    project?: string;
    env?: string;
    targetName?: string;
}

export interface ListWorkflowRecordsRequest {
    appName: string;
    workflowName: string;
    page?: number;
    pageSize?: number;
}

export interface ListWorkflowRecordsFromEnvRequest {
    appName: string;
    envName: string;
    page?: number;
    pageSize?: number;
}

export interface PublishApplicationTemplateRequest {
    appName: string;
    body: V1CreateApplicationTemplateRequest;
}

export interface RecycleApplicationEnvRequest {
    appName: string;
    envName: string;
}

export interface ResetAppToLatestRevisionRequest {
    appName: string;
}

export interface ResumeWorkflowRecordRequest {
    appName: string;
    workflowName: string;
    record: string;
    step?: string;
}

export interface RollbackApplicationWithRevisionRequest {
    appName: string;
    revision: string;
}

export interface RollbackWorkflowRecordRequest {
    appName: string;
    workflowName: string;
    record: string;
    rollbackVersion?: string;
}

export interface TerminateWorkflowRecordRequest {
    appName: string;
    workflowName: string;
    record: string;
}

export interface UpdateApplicationRequest {
    appName: string;
    body: V1UpdateApplicationRequest;
}

export interface UpdateApplicationEnvRequest {
    appName: string;
    envName: string;
    body: object;
}

export interface UpdateApplicationPolicyRequest {
    appName: string;
    policyName: string;
    body: V1UpdatePolicyRequest;
}

export interface UpdateApplicationTraitRequest {
    appName: string;
    compName: string;
    traitType: string;
    body: V1UpdateApplicationTraitRequest;
}

export interface UpdateApplicationTriggerRequest {
    appName: string;
    token: string;
}

export interface UpdateComponentRequest {
    appName: string;
    compName: string;
    body: V1UpdateApplicationComponentRequest;
}

export interface UpdateWorkflowRequest {
    appName: string;
    workflowName: string;
    body: V1UpdateWorkflowRequest;
}

/**
 *
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     * add trait for a component
     */
    async addApplicationTraitRaw(requestParameters: AddApplicationTraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling addApplicationTrait.');
        }

        if (requestParameters.compName === null || requestParameters.compName === undefined) {
            throw new runtime.RequiredError('compName','Required parameter requestParameters.compName was null or undefined when calling addApplicationTrait.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addApplicationTrait.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components/{compName}/traits`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"compName"}}`, encodeURIComponent(String(requestParameters.compName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateApplicationTraitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * add trait for a component
     */
    async addApplicationTrait(requestParameters: AddApplicationTraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addApplicationTraitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail one application
     */
    async applicationStatisticsRaw(requestParameters: ApplicationStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationStatisticsResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling applicationStatistics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/statistics`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationStatisticsResponseFromJSON(jsonValue));
    }

    /**
     * detail one application
     */
    async applicationStatistics(requestParameters: ApplicationStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationStatisticsResponse> {
        const response = await this.applicationStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * compare application
     */
    async compareAppRaw(requestParameters: CompareAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AppCompareResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling compareApp.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling compareApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/compare`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1AppCompareReqToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AppCompareResponseFromJSON(jsonValue));
    }

    /**
     * compare application
     */
    async compareApp(requestParameters: CompareAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AppCompareResponse> {
        const response = await this.compareAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create one application
     */
    async createApplicationRaw(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationBase>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateApplicationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationBaseFromJSON(jsonValue));
    }

    /**
     * create one application
     */
    async createApplication(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationBase> {
        const response = await this.createApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creating an application environment
     */
    async createApplicationEnvRaw(requestParameters: CreateApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1EnvBinding>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling createApplicationEnv.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplicationEnv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/envs`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateApplicationEnvbindingRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1EnvBindingFromJSON(jsonValue));
    }

    /**
     * creating an application environment
     */
    async createApplicationEnv(requestParameters: CreateApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1EnvBinding> {
        const response = await this.createApplicationEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create policy for application
     */
    async createApplicationPolicyRaw(requestParameters: CreateApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PolicyBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling createApplicationPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplicationPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/policies`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreatePolicyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PolicyBaseFromJSON(jsonValue));
    }

    /**
     * create policy for application
     */
    async createApplicationPolicy(requestParameters: CreateApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PolicyBase> {
        const response = await this.createApplicationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an application trigger
     */
    async createApplicationTriggerRaw(requestParameters: CreateApplicationTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationTriggerBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling createApplicationTrigger.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplicationTrigger.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/triggers`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateApplicationTriggerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationTriggerBaseFromJSON(jsonValue));
    }

    /**
     * Create an application trigger
     */
    async createApplicationTrigger(requestParameters: CreateApplicationTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationTriggerBase> {
        const response = await this.createApplicationTriggerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create component  for application
     */
    async createComponentRaw(requestParameters: CreateComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ComponentBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling createComponent.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateComponentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ComponentBaseFromJSON(jsonValue));
    }

    /**
     * create component  for application
     */
    async createComponent(requestParameters: CreateComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ComponentBase> {
        const response = await this.createComponentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create application workflow
     */
    async createOrUpdateApplicationWorkflowRaw(requestParameters: CreateOrUpdateApplicationWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailWorkflowResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling createOrUpdateApplicationWorkflow.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrUpdateApplicationWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateWorkflowRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailWorkflowResponseFromJSON(jsonValue));
    }

    /**
     * create application workflow
     */
    async createOrUpdateApplicationWorkflow(requestParameters: CreateOrUpdateApplicationWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailWorkflowResponse> {
        const response = await this.createOrUpdateApplicationWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete one application
     */
    async deleteApplicationRaw(requestParameters: DeleteApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete one application
     */
    async deleteApplication(requestParameters: DeleteApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete an application environment
     */
    async deleteApplicationEnvRaw(requestParameters: DeleteApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteApplicationEnv.');
        }

        if (requestParameters.envName === null || requestParameters.envName === undefined) {
            throw new runtime.RequiredError('envName','Required parameter requestParameters.envName was null or undefined when calling deleteApplicationEnv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/envs/{envName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"envName"}}`, encodeURIComponent(String(requestParameters.envName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete an application environment
     */
    async deleteApplicationEnv(requestParameters: DeleteApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteApplicationEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail policy for application
     */
    async deleteApplicationPolicyRaw(requestParameters: DeleteApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteApplicationPolicy.');
        }

        if (requestParameters.policyName === null || requestParameters.policyName === undefined) {
            throw new runtime.RequiredError('policyName','Required parameter requestParameters.policyName was null or undefined when calling deleteApplicationPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/policies/{policyName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"policyName"}}`, encodeURIComponent(String(requestParameters.policyName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * detail policy for application
     */
    async deleteApplicationPolicy(requestParameters: DeleteApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteApplicationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete trait from a component
     */
    async deleteApplicationTraitRaw(requestParameters: DeleteApplicationTraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationTrait>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteApplicationTrait.');
        }

        if (requestParameters.compName === null || requestParameters.compName === undefined) {
            throw new runtime.RequiredError('compName','Required parameter requestParameters.compName was null or undefined when calling deleteApplicationTrait.');
        }

        if (requestParameters.traitType === null || requestParameters.traitType === undefined) {
            throw new runtime.RequiredError('traitType','Required parameter requestParameters.traitType was null or undefined when calling deleteApplicationTrait.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components/{compName}/traits/{traitType}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"compName"}}`, encodeURIComponent(String(requestParameters.compName))).replace(`{${"traitType"}}`, encodeURIComponent(String(requestParameters.traitType))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationTraitFromJSON(jsonValue));
    }

    /**
     * delete trait from a component
     */
    async deleteApplicationTrait(requestParameters: DeleteApplicationTraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationTrait> {
        const response = await this.deleteApplicationTraitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an application trigger
     */
    async deleteApplicationTriggerRaw(requestParameters: DeleteApplicationTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteApplicationTrigger.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling deleteApplicationTrigger.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/triggers/{token}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an application trigger
     */
    async deleteApplicationTrigger(requestParameters: DeleteApplicationTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteApplicationTriggerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a component
     */
    async deleteComponentRaw(requestParameters: DeleteComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteComponent.');
        }

        if (requestParameters.compName === null || requestParameters.compName === undefined) {
            throw new runtime.RequiredError('compName','Required parameter requestParameters.compName was null or undefined when calling deleteComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components/{compName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"compName"}}`, encodeURIComponent(String(requestParameters.compName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete a component
     */
    async deleteComponent(requestParameters: DeleteComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteComponentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deletet workflow
     */
    async deleteWorkflowRaw(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteWorkflow.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling deleteWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * deletet workflow
     */
    async deleteWorkflow(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deploy or upgrade the application
     */
    async deployApplicationRaw(requestParameters: DeployApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationDeployResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deployApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deployApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/deploy`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ApplicationDeployRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationDeployResponseFromJSON(jsonValue));
    }

    /**
     * deploy or upgrade the application
     */
    async deployApplication(requestParameters: DeployApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationDeployResponse> {
        const response = await this.deployApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail one application
     */
    async detailApplicationRaw(requestParameters: DetailApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailApplicationResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling detailApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailApplicationResponseFromJSON(jsonValue));
    }

    /**
     * detail one application
     */
    async detailApplication(requestParameters: DetailApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailApplicationResponse> {
        const response = await this.detailApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail policy for application
     */
    async detailApplicationPolicyRaw(requestParameters: DetailApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailPolicyResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling detailApplicationPolicy.');
        }

        if (requestParameters.policyName === null || requestParameters.policyName === undefined) {
            throw new runtime.RequiredError('policyName','Required parameter requestParameters.policyName was null or undefined when calling detailApplicationPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/policies/{policyName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"policyName"}}`, encodeURIComponent(String(requestParameters.policyName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailPolicyResponseFromJSON(jsonValue));
    }

    /**
     * detail policy for application
     */
    async detailApplicationPolicy(requestParameters: DetailApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailPolicyResponse> {
        const response = await this.detailApplicationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail revision for application
     */
    async detailApplicationRevisionRaw(requestParameters: DetailApplicationRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailRevisionResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling detailApplicationRevision.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling detailApplicationRevision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/revisions/{revision}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"revision"}}`, encodeURIComponent(String(requestParameters.revision))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailRevisionResponseFromJSON(jsonValue));
    }

    /**
     * detail revision for application
     */
    async detailApplicationRevision(requestParameters: DetailApplicationRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailRevisionResponse> {
        const response = await this.detailApplicationRevisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail component for application
     */
    async detailComponentRaw(requestParameters: DetailComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailComponentResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling detailComponent.');
        }

        if (requestParameters.compName === null || requestParameters.compName === undefined) {
            throw new runtime.RequiredError('compName','Required parameter requestParameters.compName was null or undefined when calling detailComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components/{compName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"compName"}}`, encodeURIComponent(String(requestParameters.compName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailComponentResponseFromJSON(jsonValue));
    }

    /**
     * detail component for application
     */
    async detailComponent(requestParameters: DetailComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailComponentResponse> {
        const response = await this.detailComponentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail application workflow
     */
    async detailWorkflowRaw(requestParameters: DetailWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailWorkflowResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling detailWorkflow.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling detailWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailWorkflowResponseFromJSON(jsonValue));
    }

    /**
     * detail application workflow
     */
    async detailWorkflow(requestParameters: DetailWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailWorkflowResponse> {
        const response = await this.detailWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * query application workflow execution record detail
     */
    async detailWorkflowRecordRaw(requestParameters: DetailWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailWorkflowRecordResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling detailWorkflowRecord.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling detailWorkflowRecord.');
        }

        if (requestParameters.record === null || requestParameters.record === undefined) {
            throw new runtime.RequiredError('record','Required parameter requestParameters.record was null or undefined when calling detailWorkflowRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))).replace(`{${"record"}}`, encodeURIComponent(String(requestParameters.record))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailWorkflowRecordResponseFromJSON(jsonValue));
    }

    /**
     * query application workflow execution record detail
     */
    async detailWorkflowRecord(requestParameters: DetailWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailWorkflowRecordResponse> {
        const response = await this.detailWorkflowRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * dry-run application to latest revision
     */
    async dryRunAppOrRevisionRaw(requestParameters: DryRunAppOrRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AppDryRunResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling dryRunAppOrRevision.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling dryRunAppOrRevision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/dry-run`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1AppDryRunReqToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AppDryRunResponseFromJSON(jsonValue));
    }

    /**
     * dry-run application to latest revision
     */
    async dryRunAppOrRevision(requestParameters: DryRunAppOrRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AppDryRunResponse> {
        const response = await this.dryRunAppOrRevisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get application status
     */
    async getApplicationStatusRaw(requestParameters: GetApplicationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationStatusResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling getApplicationStatus.');
        }

        if (requestParameters.envName === null || requestParameters.envName === undefined) {
            throw new runtime.RequiredError('envName','Required parameter requestParameters.envName was null or undefined when calling getApplicationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/envs/{envName}/status`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"envName"}}`, encodeURIComponent(String(requestParameters.envName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationStatusResponseFromJSON(jsonValue));
    }

    /**
     * get application status
     */
    async getApplicationStatus(requestParameters: GetApplicationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationStatusResponse> {
        const response = await this.getApplicationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get application status from all envs
     */
    async getApplicationStatusFromAllEnvsRaw(requestParameters: GetApplicationStatusFromAllEnvsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationStatusListResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling getApplicationStatusFromAllEnvs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/status`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationStatusListResponseFromJSON(jsonValue));
    }

    /**
     * get application status from all envs
     */
    async getApplicationStatusFromAllEnvs(requestParameters: GetApplicationStatusFromAllEnvsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationStatusListResponse> {
        const response = await this.getApplicationStatusFromAllEnvsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get the workflow step inputs
     */
    async getWorkflowRecordInputsRaw(requestParameters: GetWorkflowRecordInputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPipelineRunInputResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling getWorkflowRecordInputs.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling getWorkflowRecordInputs.');
        }

        if (requestParameters.record === null || requestParameters.record === undefined) {
            throw new runtime.RequiredError('record','Required parameter requestParameters.record was null or undefined when calling getWorkflowRecordInputs.');
        }

        if (requestParameters.step === null || requestParameters.step === undefined) {
            throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling getWorkflowRecordInputs.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/inputs`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))).replace(`{${"record"}}`, encodeURIComponent(String(requestParameters.record))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPipelineRunInputResponseFromJSON(jsonValue));
    }

    /**
     * get the workflow step inputs
     */
    async getWorkflowRecordInputs(requestParameters: GetWorkflowRecordInputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPipelineRunInputResponse> {
        const response = await this.getWorkflowRecordInputsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get the workflow step logs
     */
    async getWorkflowRecordLogsRaw(requestParameters: GetWorkflowRecordLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling getWorkflowRecordLogs.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling getWorkflowRecordLogs.');
        }

        if (requestParameters.record === null || requestParameters.record === undefined) {
            throw new runtime.RequiredError('record','Required parameter requestParameters.record was null or undefined when calling getWorkflowRecordLogs.');
        }

        if (requestParameters.step === null || requestParameters.step === undefined) {
            throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling getWorkflowRecordLogs.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/logs`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))).replace(`{${"record"}}`, encodeURIComponent(String(requestParameters.record))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get the workflow step logs
     */
    async getWorkflowRecordLogs(requestParameters: GetWorkflowRecordLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getWorkflowRecordLogsRaw(requestParameters, initOverrides);
    }

    /**
     * get the workflow step inputs
     */
    async getWorkflowRecordOutputsRaw(requestParameters: GetWorkflowRecordOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPipelineRunOutputResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling getWorkflowRecordOutputs.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling getWorkflowRecordOutputs.');
        }

        if (requestParameters.record === null || requestParameters.record === undefined) {
            throw new runtime.RequiredError('record','Required parameter requestParameters.record was null or undefined when calling getWorkflowRecordOutputs.');
        }

        if (requestParameters.step === null || requestParameters.step === undefined) {
            throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling getWorkflowRecordOutputs.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/outputs`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))).replace(`{${"record"}}`, encodeURIComponent(String(requestParameters.record))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPipelineRunOutputResponseFromJSON(jsonValue));
    }

    /**
     * get the workflow step inputs
     */
    async getWorkflowRecordOutputs(requestParameters: GetWorkflowRecordOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPipelineRunOutputResponse> {
        const response = await this.getWorkflowRecordOutputsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * gets the list of application components
     */
    async listApplicationComponentsRaw(requestParameters: ListApplicationComponentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ComponentListResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listApplicationComponents.');
        }

        const queryParameters: any = {};

        if (requestParameters.envName !== undefined) {
            queryParameters['envName'] = requestParameters.envName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ComponentListResponseFromJSON(jsonValue));
    }

    /**
     * gets the list of application components
     */
    async listApplicationComponents(requestParameters: ListApplicationComponentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ComponentListResponse> {
        const response = await this.listApplicationComponentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list policy for application
     */
    async listApplicationEnvsRaw(requestParameters: ListApplicationEnvsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListApplicationEnvBinding>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listApplicationEnvs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/envs`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListApplicationEnvBindingFromJSON(jsonValue));
    }

    /**
     * list policy for application
     */
    async listApplicationEnvs(requestParameters: ListApplicationEnvsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListApplicationEnvBinding> {
        const response = await this.listApplicationEnvsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list policy for application
     */
    async listApplicationPoliciesRaw(requestParameters: ListApplicationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListApplicationPolicy>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listApplicationPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/policies`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListApplicationPolicyFromJSON(jsonValue));
    }

    /**
     * list policy for application
     */
    async listApplicationPolicies(requestParameters: ListApplicationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListApplicationPolicy> {
        const response = await this.listApplicationPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list application records
     */
    async listApplicationRecordsRaw(requestParameters: ListApplicationRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listApplicationRecords.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/records`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * list application records
     */
    async listApplicationRecords(requestParameters: ListApplicationRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listApplicationRecordsRaw(requestParameters, initOverrides);
    }

    /**
     * list revisions for application
     */
    async listApplicationRevisionsRaw(requestParameters: ListApplicationRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListRevisionsResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listApplicationRevisions.');
        }

        const queryParameters: any = {};

        if (requestParameters.envName !== undefined) {
            queryParameters['envName'] = requestParameters.envName;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/revisions`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListRevisionsResponseFromJSON(jsonValue));
    }

    /**
     * list revisions for application
     */
    async listApplicationRevisions(requestParameters: ListApplicationRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListRevisionsResponse> {
        const response = await this.listApplicationRevisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the application triggers
     */
    async listApplicationTriggersRaw(requestParameters: ListApplicationTriggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListApplicationTriggerResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listApplicationTriggers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/triggers`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListApplicationTriggerResponseFromJSON(jsonValue));
    }

    /**
     * List the application triggers
     */
    async listApplicationTriggers(requestParameters: ListApplicationTriggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListApplicationTriggerResponse> {
        const response = await this.listApplicationTriggersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list application workflow
     */
    async listApplicationWorkflowsRaw(requestParameters: ListApplicationWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListWorkflowResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listApplicationWorkflows.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListWorkflowResponseFromJSON(jsonValue));
    }

    /**
     * list application workflow
     */
    async listApplicationWorkflows(requestParameters: ListApplicationWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListWorkflowResponse> {
        const response = await this.listApplicationWorkflowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all applications
     */
    async listApplicationsRaw(requestParameters: ListApplicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListApplicationResponse>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.env !== undefined) {
            queryParameters['env'] = requestParameters.env;
        }

        if (requestParameters.targetName !== undefined) {
            queryParameters['targetName'] = requestParameters.targetName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListApplicationResponseFromJSON(jsonValue));
    }

    /**
     * list all applications
     */
    async listApplications(requestParameters: ListApplicationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListApplicationResponse> {
        const response = await this.listApplicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * query application workflow execution record
     */
    async listWorkflowRecordsRaw(requestParameters: ListWorkflowRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListWorkflowRecordsResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listWorkflowRecords.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling listWorkflowRecords.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListWorkflowRecordsResponseFromJSON(jsonValue));
    }

    /**
     * query application workflow execution record
     */
    async listWorkflowRecords(requestParameters: ListWorkflowRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListWorkflowRecordsResponse> {
        const response = await this.listWorkflowRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * query application workflow execution record of one environment
     */
    async listWorkflowRecordsFromEnvRaw(requestParameters: ListWorkflowRecordsFromEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListWorkflowRecordsResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling listWorkflowRecordsFromEnv.');
        }

        if (requestParameters.envName === null || requestParameters.envName === undefined) {
            throw new runtime.RequiredError('envName','Required parameter requestParameters.envName was null or undefined when calling listWorkflowRecordsFromEnv.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/envs/{envName}/records`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"envName"}}`, encodeURIComponent(String(requestParameters.envName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListWorkflowRecordsResponseFromJSON(jsonValue));
    }

    /**
     * query application workflow execution record of one environment
     */
    async listWorkflowRecordsFromEnv(requestParameters: ListWorkflowRecordsFromEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListWorkflowRecordsResponse> {
        const response = await this.listWorkflowRecordsFromEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create one application template
     */
    async publishApplicationTemplateRaw(requestParameters: PublishApplicationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationTemplateBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling publishApplicationTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling publishApplicationTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/template`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateApplicationTemplateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationTemplateBaseFromJSON(jsonValue));
    }

    /**
     * create one application template
     */
    async publishApplicationTemplate(requestParameters: PublishApplicationTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationTemplateBase> {
        const response = await this.publishApplicationTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * recycle application env
     */
    async recycleApplicationEnvRaw(requestParameters: RecycleApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling recycleApplicationEnv.');
        }

        if (requestParameters.envName === null || requestParameters.envName === undefined) {
            throw new runtime.RequiredError('envName','Required parameter requestParameters.envName was null or undefined when calling recycleApplicationEnv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/envs/{envName}/recycle`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"envName"}}`, encodeURIComponent(String(requestParameters.envName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * recycle application env
     */
    async recycleApplicationEnv(requestParameters: RecycleApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.recycleApplicationEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * reset application to latest revision
     */
    async resetAppToLatestRevisionRaw(requestParameters: ResetAppToLatestRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AppResetResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling resetAppToLatestRevision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/reset`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AppResetResponseFromJSON(jsonValue));
    }

    /**
     * reset application to latest revision
     */
    async resetAppToLatestRevision(requestParameters: ResetAppToLatestRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AppResetResponse> {
        const response = await this.resetAppToLatestRevisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * resume suspend workflow record
     */
    async resumeWorkflowRecordRaw(requestParameters: ResumeWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling resumeWorkflowRecord.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling resumeWorkflowRecord.');
        }

        if (requestParameters.record === null || requestParameters.record === undefined) {
            throw new runtime.RequiredError('record','Required parameter requestParameters.record was null or undefined when calling resumeWorkflowRecord.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/resume`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))).replace(`{${"record"}}`, encodeURIComponent(String(requestParameters.record))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * resume suspend workflow record
     */
    async resumeWorkflowRecord(requestParameters: ResumeWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.resumeWorkflowRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail revision for application
     */
    async rollbackApplicationWithRevisionRaw(requestParameters: RollbackApplicationWithRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationRollbackResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling rollbackApplicationWithRevision.');
        }

        if (requestParameters.revision === null || requestParameters.revision === undefined) {
            throw new runtime.RequiredError('revision','Required parameter requestParameters.revision was null or undefined when calling rollbackApplicationWithRevision.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/revisions/{revision}/rollback`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"revision"}}`, encodeURIComponent(String(requestParameters.revision))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationRollbackResponseFromJSON(jsonValue));
    }

    /**
     * detail revision for application
     */
    async rollbackApplicationWithRevision(requestParameters: RollbackApplicationWithRevisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationRollbackResponse> {
        const response = await this.rollbackApplicationWithRevisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * rollback suspend application record
     */
    async rollbackWorkflowRecordRaw(requestParameters: RollbackWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1WorkflowRecordBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling rollbackWorkflowRecord.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling rollbackWorkflowRecord.');
        }

        if (requestParameters.record === null || requestParameters.record === undefined) {
            throw new runtime.RequiredError('record','Required parameter requestParameters.record was null or undefined when calling rollbackWorkflowRecord.');
        }

        const queryParameters: any = {};

        if (requestParameters.rollbackVersion !== undefined) {
            queryParameters['rollbackVersion'] = requestParameters.rollbackVersion;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/rollback`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))).replace(`{${"record"}}`, encodeURIComponent(String(requestParameters.record))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1WorkflowRecordBaseFromJSON(jsonValue));
    }

    /**
     * rollback suspend application record
     */
    async rollbackWorkflowRecord(requestParameters: RollbackWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1WorkflowRecordBase> {
        const response = await this.rollbackWorkflowRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * terminate suspend workflow record
     */
    async terminateWorkflowRecordRaw(requestParameters: TerminateWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling terminateWorkflowRecord.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling terminateWorkflowRecord.');
        }

        if (requestParameters.record === null || requestParameters.record === undefined) {
            throw new runtime.RequiredError('record','Required parameter requestParameters.record was null or undefined when calling terminateWorkflowRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}/records/{record}/terminate`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))).replace(`{${"record"}}`, encodeURIComponent(String(requestParameters.record))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * terminate suspend workflow record
     */
    async terminateWorkflowRecord(requestParameters: TerminateWorkflowRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.terminateWorkflowRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update one application
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling updateApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateApplicationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationBaseFromJSON(jsonValue));
    }

    /**
     * update one application
     */
    async updateApplication(requestParameters: UpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationBase> {
        const response = await this.updateApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * set application  differences in the specified environment
     */
    async updateApplicationEnvRaw(requestParameters: UpdateApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1EnvBinding>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling updateApplicationEnv.');
        }

        if (requestParameters.envName === null || requestParameters.envName === undefined) {
            throw new runtime.RequiredError('envName','Required parameter requestParameters.envName was null or undefined when calling updateApplicationEnv.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateApplicationEnv.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/envs/{envName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"envName"}}`, encodeURIComponent(String(requestParameters.envName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1EnvBindingFromJSON(jsonValue));
    }

    /**
     * set application  differences in the specified environment
     */
    async updateApplicationEnv(requestParameters: UpdateApplicationEnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1EnvBinding> {
        const response = await this.updateApplicationEnvRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update policy for application
     */
    async updateApplicationPolicyRaw(requestParameters: UpdateApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailPolicyResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling updateApplicationPolicy.');
        }

        if (requestParameters.policyName === null || requestParameters.policyName === undefined) {
            throw new runtime.RequiredError('policyName','Required parameter requestParameters.policyName was null or undefined when calling updateApplicationPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateApplicationPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/policies/{policyName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"policyName"}}`, encodeURIComponent(String(requestParameters.policyName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdatePolicyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailPolicyResponseFromJSON(jsonValue));
    }

    /**
     * update policy for application
     */
    async updateApplicationPolicy(requestParameters: UpdateApplicationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailPolicyResponse> {
        const response = await this.updateApplicationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update trait from a component
     */
    async updateApplicationTraitRaw(requestParameters: UpdateApplicationTraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationTrait>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling updateApplicationTrait.');
        }

        if (requestParameters.compName === null || requestParameters.compName === undefined) {
            throw new runtime.RequiredError('compName','Required parameter requestParameters.compName was null or undefined when calling updateApplicationTrait.');
        }

        if (requestParameters.traitType === null || requestParameters.traitType === undefined) {
            throw new runtime.RequiredError('traitType','Required parameter requestParameters.traitType was null or undefined when calling updateApplicationTrait.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateApplicationTrait.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components/{compName}/traits/{traitType}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"compName"}}`, encodeURIComponent(String(requestParameters.compName))).replace(`{${"traitType"}}`, encodeURIComponent(String(requestParameters.traitType))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateApplicationTraitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationTraitFromJSON(jsonValue));
    }

    /**
     * update trait from a component
     */
    async updateApplicationTrait(requestParameters: UpdateApplicationTraitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationTrait> {
        const response = await this.updateApplicationTraitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an application trigger
     */
    async updateApplicationTriggerRaw(requestParameters: UpdateApplicationTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationTriggerBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling updateApplicationTrigger.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling updateApplicationTrigger.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{appName}/triggers/{token}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationTriggerBaseFromJSON(jsonValue));
    }

    /**
     * Update an application trigger
     */
    async updateApplicationTrigger(requestParameters: UpdateApplicationTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationTriggerBase> {
        const response = await this.updateApplicationTriggerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update component config
     */
    async updateComponentRaw(requestParameters: UpdateComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ComponentBase>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling updateComponent.');
        }

        if (requestParameters.compName === null || requestParameters.compName === undefined) {
            throw new runtime.RequiredError('compName','Required parameter requestParameters.compName was null or undefined when calling updateComponent.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/components/{compName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"compName"}}`, encodeURIComponent(String(requestParameters.compName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateApplicationComponentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ComponentBaseFromJSON(jsonValue));
    }

    /**
     * update component config
     */
    async updateComponent(requestParameters: UpdateComponentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ComponentBase> {
        const response = await this.updateComponentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update application workflow config
     */
    async updateWorkflowRaw(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailWorkflowResponse>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling updateWorkflow.');
        }

        if (requestParameters.workflowName === null || requestParameters.workflowName === undefined) {
            throw new runtime.RequiredError('workflowName','Required parameter requestParameters.workflowName was null or undefined when calling updateWorkflow.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{appName}/workflows/{workflowName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))).replace(`{${"workflowName"}}`, encodeURIComponent(String(requestParameters.workflowName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateWorkflowRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailWorkflowResponseFromJSON(jsonValue));
    }

    /**
     * update application workflow config
     */
    async updateWorkflow(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailWorkflowResponse> {
        const response = await this.updateWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
