/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1AddonStatusResponse,
  V1DetailAddonResponse,
  V1EnableAddonRequest,
  V1ListAddonResponse,
  V1ListEnabledAddonResponse,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1AddonStatusResponseFromJSON,
    V1AddonStatusResponseToJSON,
    V1DetailAddonResponseFromJSON,
    V1DetailAddonResponseToJSON,
    V1EnableAddonRequestFromJSON,
    V1EnableAddonRequestToJSON,
    V1ListAddonResponseFromJSON,
    V1ListAddonResponseToJSON,
    V1ListEnabledAddonResponseFromJSON,
    V1ListEnabledAddonResponseToJSON,
} from '../models/index';

export interface DetailAddonRequest {
    addonName: string;
    version?: string;
    registry?: string;
}

export interface DisableAddonRequest {
    addonName: string;
    force?: boolean;
}

export interface EnableAddonRequest {
    addonName: string;
    body: V1EnableAddonRequest;
}

export interface ListRequest {
    registry?: string;
    query?: string;
}

export interface ListAddonsRequest {
    registry?: string;
    query?: string;
}

export interface StatusAddonRequest {
    addonName: string;
}

export interface UpdateAddonRequest {
    addonName: string;
    body: V1EnableAddonRequest;
}

/**
 *
 */
export class AddonApi extends runtime.BaseAPI {

    /**
     * show details of an addon
     */
    async detailAddonRaw(requestParameters: DetailAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailAddonResponse>> {
        if (requestParameters.addonName === null || requestParameters.addonName === undefined) {
            throw new runtime.RequiredError('addonName','Required parameter requestParameters.addonName was null or undefined when calling detailAddon.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.registry !== undefined) {
            queryParameters['registry'] = requestParameters.registry;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/addons/{addonName}`.replace(`{${"addonName"}}`, encodeURIComponent(String(requestParameters.addonName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailAddonResponseFromJSON(jsonValue));
    }

    /**
     * show details of an addon
     */
    async detailAddon(requestParameters: DetailAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailAddonResponse> {
        const response = await this.detailAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * disable an addon
     */
    async disableAddonRaw(requestParameters: DisableAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddonStatusResponse>> {
        if (requestParameters.addonName === null || requestParameters.addonName === undefined) {
            throw new runtime.RequiredError('addonName','Required parameter requestParameters.addonName was null or undefined when calling disableAddon.');
        }

        const queryParameters: any = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/addons/{addonName}/disable`.replace(`{${"addonName"}}`, encodeURIComponent(String(requestParameters.addonName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddonStatusResponseFromJSON(jsonValue));
    }

    /**
     * disable an addon
     */
    async disableAddon(requestParameters: DisableAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddonStatusResponse> {
        const response = await this.disableAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * enable an addon
     */
    async enableAddonRaw(requestParameters: EnableAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddonStatusResponse>> {
        if (requestParameters.addonName === null || requestParameters.addonName === undefined) {
            throw new runtime.RequiredError('addonName','Required parameter requestParameters.addonName was null or undefined when calling enableAddon.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling enableAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/addons/{addonName}/enable`.replace(`{${"addonName"}}`, encodeURIComponent(String(requestParameters.addonName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1EnableAddonRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddonStatusResponseFromJSON(jsonValue));
    }

    /**
     * enable an addon
     */
    async enableAddon(requestParameters: EnableAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddonStatusResponse> {
        const response = await this.enableAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all enabled addons
     */
    async listRaw(requestParameters: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListEnabledAddonResponse>> {
        const queryParameters: any = {};

        if (requestParameters.registry !== undefined) {
            queryParameters['registry'] = requestParameters.registry;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/enabled_addon`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListEnabledAddonResponseFromJSON(jsonValue));
    }

    /**
     * list all enabled addons
     */
    async list(requestParameters: ListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListEnabledAddonResponse> {
        const response = await this.listRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all addons
     */
    async listAddonsRaw(requestParameters: ListAddonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListAddonResponse>> {
        const queryParameters: any = {};

        if (requestParameters.registry !== undefined) {
            queryParameters['registry'] = requestParameters.registry;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/addons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListAddonResponseFromJSON(jsonValue));
    }

    /**
     * list all addons
     */
    async listAddons(requestParameters: ListAddonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListAddonResponse> {
        const response = await this.listAddonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * show status of an addon
     */
    async statusAddonRaw(requestParameters: StatusAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddonStatusResponse>> {
        if (requestParameters.addonName === null || requestParameters.addonName === undefined) {
            throw new runtime.RequiredError('addonName','Required parameter requestParameters.addonName was null or undefined when calling statusAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/addons/{addonName}/status`.replace(`{${"addonName"}}`, encodeURIComponent(String(requestParameters.addonName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddonStatusResponseFromJSON(jsonValue));
    }

    /**
     * show status of an addon
     */
    async statusAddon(requestParameters: StatusAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddonStatusResponse> {
        const response = await this.statusAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update an addon
     */
    async updateAddonRaw(requestParameters: UpdateAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddonStatusResponse>> {
        if (requestParameters.addonName === null || requestParameters.addonName === undefined) {
            throw new runtime.RequiredError('addonName','Required parameter requestParameters.addonName was null or undefined when calling updateAddon.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/addons/{addonName}/update`.replace(`{${"addonName"}}`, encodeURIComponent(String(requestParameters.addonName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1EnableAddonRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddonStatusResponseFromJSON(jsonValue));
    }

    /**
     * update an addon
     */
    async updateAddon(requestParameters: UpdateAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddonStatusResponse> {
        const response = await this.updateAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
