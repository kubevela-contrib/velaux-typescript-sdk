/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1AccessKeyRequest,
  V1ClusterBase,
  V1ConnectCloudClusterRequest,
  V1CreateCloudClusterRequest,
  V1CreateCloudClusterResponse,
  V1CreateClusterNamespaceRequest,
  V1CreateClusterNamespaceResponse,
  V1CreateClusterRequest,
  V1DetailClusterResponse,
  V1ListCloudClusterCreationResponse,
  V1ListCloudClusterResponse,
  V1ListClusterResponse,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1AccessKeyRequestFromJSON,
    V1AccessKeyRequestToJSON,
    V1ClusterBaseFromJSON,
    V1ClusterBaseToJSON,
    V1ConnectCloudClusterRequestFromJSON,
    V1ConnectCloudClusterRequestToJSON,
    V1CreateCloudClusterRequestFromJSON,
    V1CreateCloudClusterRequestToJSON,
    V1CreateCloudClusterResponseFromJSON,
    V1CreateCloudClusterResponseToJSON,
    V1CreateClusterNamespaceRequestFromJSON,
    V1CreateClusterNamespaceRequestToJSON,
    V1CreateClusterNamespaceResponseFromJSON,
    V1CreateClusterNamespaceResponseToJSON,
    V1CreateClusterRequestFromJSON,
    V1CreateClusterRequestToJSON,
    V1DetailClusterResponseFromJSON,
    V1DetailClusterResponseToJSON,
    V1ListCloudClusterCreationResponseFromJSON,
    V1ListCloudClusterCreationResponseToJSON,
    V1ListCloudClusterResponseFromJSON,
    V1ListCloudClusterResponseToJSON,
    V1ListClusterResponseFromJSON,
    V1ListClusterResponseToJSON,
} from '../models/index';

export interface ConnectCloudClusterRequest {
    provider: string;
    body: V1ConnectCloudClusterRequest;
}

export interface CreateCloudClusterRequest {
    provider: string;
    body: V1CreateCloudClusterRequest;
}

export interface CreateKubeClusterRequest {
    body: V1CreateClusterRequest;
}

export interface CreateNamespaceRequest {
    clusterName: string;
    body: V1CreateClusterNamespaceRequest;
}

export interface DeleteCloudClusterCreationRequest {
    provider: string;
    cloudClusterName: string;
}

export interface DeleteKubeClusterRequest {
    clusterName: string;
}

export interface GetCloudClusterCreationStatusRequest {
    provider: string;
    cloudClusterName: string;
}

export interface GetKubeClusterRequest {
    clusterName: string;
}

export interface ListCloudClusterCreationRequest {
    provider: string;
}

export interface ListCloudClustersRequest {
    provider: string;
    body: V1AccessKeyRequest;
    page?: number;
    pageSize?: number;
}

export interface ListKubeClustersRequest {
    query?: string;
    page?: number;
    pageSize?: number;
}

export interface ModifyKubeClusterRequest {
    clusterName: string;
    body: V1CreateClusterRequest;
}

/**
 *
 */
export class ClusterApi extends runtime.BaseAPI {

    /**
     * create cluster from cloud cluster
     */
    async connectCloudClusterRaw(requestParameters: ConnectCloudClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ClusterBase>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling connectCloudCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling connectCloudCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/clusters/cloud_clusters/{provider}/connect`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ConnectCloudClusterRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ClusterBaseFromJSON(jsonValue));
    }

    /**
     * create cluster from cloud cluster
     */
    async connectCloudCluster(requestParameters: ConnectCloudClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ClusterBase> {
        const response = await this.connectCloudClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create cloud cluster
     */
    async createCloudClusterRaw(requestParameters: CreateCloudClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateCloudClusterResponse>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling createCloudCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCloudCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/clusters/cloud_clusters/{provider}/create`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateCloudClusterRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateCloudClusterResponseFromJSON(jsonValue));
    }

    /**
     * create cloud cluster
     */
    async createCloudCluster(requestParameters: CreateCloudClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateCloudClusterResponse> {
        const response = await this.createCloudClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create cluster
     */
    async createKubeClusterRaw(requestParameters: CreateKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ClusterBase>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createKubeCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/clusters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateClusterRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ClusterBaseFromJSON(jsonValue));
    }

    /**
     * create cluster
     */
    async createKubeCluster(requestParameters: CreateKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ClusterBase> {
        const response = await this.createKubeClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create namespace in cluster
     */
    async createNamespaceRaw(requestParameters: CreateNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateClusterNamespaceResponse>> {
        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling createNamespace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/clusters/{clusterName}/namespaces`.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateClusterNamespaceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateClusterNamespaceResponseFromJSON(jsonValue));
    }

    /**
     * create namespace in cluster
     */
    async createNamespace(requestParameters: CreateNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateClusterNamespaceResponse> {
        const response = await this.createNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete cloud cluster creation
     */
    async deleteCloudClusterCreationRaw(requestParameters: DeleteCloudClusterCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateCloudClusterResponse>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling deleteCloudClusterCreation.');
        }

        if (requestParameters.cloudClusterName === null || requestParameters.cloudClusterName === undefined) {
            throw new runtime.RequiredError('cloudClusterName','Required parameter requestParameters.cloudClusterName was null or undefined when calling deleteCloudClusterCreation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clusters/cloud_clusters/{provider}/creation/{cloudClusterName}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))).replace(`{${"cloudClusterName"}}`, encodeURIComponent(String(requestParameters.cloudClusterName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateCloudClusterResponseFromJSON(jsonValue));
    }

    /**
     * delete cloud cluster creation
     */
    async deleteCloudClusterCreation(requestParameters: DeleteCloudClusterCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateCloudClusterResponse> {
        const response = await this.deleteCloudClusterCreationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete cluster
     */
    async deleteKubeClusterRaw(requestParameters: DeleteKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ClusterBase>> {
        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling deleteKubeCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clusters/{clusterName}`.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ClusterBaseFromJSON(jsonValue));
    }

    /**
     * delete cluster
     */
    async deleteKubeCluster(requestParameters: DeleteKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ClusterBase> {
        const response = await this.deleteKubeClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * check cloud cluster create status
     */
    async getCloudClusterCreationStatusRaw(requestParameters: GetCloudClusterCreationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateCloudClusterResponse>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling getCloudClusterCreationStatus.');
        }

        if (requestParameters.cloudClusterName === null || requestParameters.cloudClusterName === undefined) {
            throw new runtime.RequiredError('cloudClusterName','Required parameter requestParameters.cloudClusterName was null or undefined when calling getCloudClusterCreationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clusters/cloud_clusters/{provider}/creation/{cloudClusterName}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))).replace(`{${"cloudClusterName"}}`, encodeURIComponent(String(requestParameters.cloudClusterName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateCloudClusterResponseFromJSON(jsonValue));
    }

    /**
     * check cloud cluster create status
     */
    async getCloudClusterCreationStatus(requestParameters: GetCloudClusterCreationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateCloudClusterResponse> {
        const response = await this.getCloudClusterCreationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail cluster info
     */
    async getKubeClusterRaw(requestParameters: GetKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DetailClusterResponse>> {
        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling getKubeCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clusters/{clusterName}`.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DetailClusterResponseFromJSON(jsonValue));
    }

    /**
     * detail cluster info
     */
    async getKubeCluster(requestParameters: GetKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DetailClusterResponse> {
        const response = await this.getKubeClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list cloud cluster creation
     */
    async listCloudClusterCreationRaw(requestParameters: ListCloudClusterCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListCloudClusterCreationResponse>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling listCloudClusterCreation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clusters/cloud_clusters/{provider}/creation`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListCloudClusterCreationResponseFromJSON(jsonValue));
    }

    /**
     * list cloud cluster creation
     */
    async listCloudClusterCreation(requestParameters: ListCloudClusterCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListCloudClusterCreationResponse> {
        const response = await this.listCloudClusterCreationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list cloud clusters
     */
    async listCloudClustersRaw(requestParameters: ListCloudClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListCloudClusterResponse>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling listCloudClusters.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listCloudClusters.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/clusters/cloud_clusters/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1AccessKeyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListCloudClusterResponseFromJSON(jsonValue));
    }

    /**
     * list cloud clusters
     */
    async listCloudClusters(requestParameters: ListCloudClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListCloudClusterResponse> {
        const response = await this.listCloudClustersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all clusters
     */
    async listKubeClustersRaw(requestParameters: ListKubeClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListClusterResponse>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/clusters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListClusterResponseFromJSON(jsonValue));
    }

    /**
     * list all clusters
     */
    async listKubeClusters(requestParameters: ListKubeClustersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListClusterResponse> {
        const response = await this.listKubeClustersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * modify cluster
     */
    async modifyKubeClusterRaw(requestParameters: ModifyKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ClusterBase>> {
        if (requestParameters.clusterName === null || requestParameters.clusterName === undefined) {
            throw new runtime.RequiredError('clusterName','Required parameter requestParameters.clusterName was null or undefined when calling modifyKubeCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling modifyKubeCluster.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/clusters/{clusterName}`.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters.clusterName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateClusterRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ClusterBaseFromJSON(jsonValue));
    }

    /**
     * modify cluster
     */
    async modifyKubeCluster(requestParameters: ModifyKubeClusterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ClusterBase> {
        const response = await this.modifyKubeClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
