/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1AddonRegistry,
  V1CreateAddonRegistryRequest,
  V1ListAddonRegistryResponse,
  V1UpdateAddonRegistryRequest,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1AddonRegistryFromJSON,
    V1AddonRegistryToJSON,
    V1CreateAddonRegistryRequestFromJSON,
    V1CreateAddonRegistryRequestToJSON,
    V1ListAddonRegistryResponseFromJSON,
    V1ListAddonRegistryResponseToJSON,
    V1UpdateAddonRegistryRequestFromJSON,
    V1UpdateAddonRegistryRequestToJSON,
} from '../models/index';

export interface CreateAddonRegistryRequest {
    body: V1CreateAddonRegistryRequest;
}

export interface DeleteAddonRegistryRequest {
    addonRegName: string;
}

export interface UpdateAddonRegistryRequest {
    addonRegName: string;
    body: V1UpdateAddonRegistryRequest;
}

/**
 *
 */
export class AddonRegistryApi extends runtime.BaseAPI {

    /**
     * create an addon registry
     */
    async createAddonRegistryRaw(requestParameters: CreateAddonRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddonRegistry>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAddonRegistry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/addon_registries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateAddonRegistryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddonRegistryFromJSON(jsonValue));
    }

    /**
     * create an addon registry
     */
    async createAddonRegistry(requestParameters: CreateAddonRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddonRegistry> {
        const response = await this.createAddonRegistryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete an addon registry
     */
    async deleteAddonRegistryRaw(requestParameters: DeleteAddonRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddonRegistry>> {
        if (requestParameters.addonRegName === null || requestParameters.addonRegName === undefined) {
            throw new runtime.RequiredError('addonRegName','Required parameter requestParameters.addonRegName was null or undefined when calling deleteAddonRegistry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/addon_registries/{addonRegName}`.replace(`{${"addonRegName"}}`, encodeURIComponent(String(requestParameters.addonRegName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddonRegistryFromJSON(jsonValue));
    }

    /**
     * delete an addon registry
     */
    async deleteAddonRegistry(requestParameters: DeleteAddonRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddonRegistry> {
        const response = await this.deleteAddonRegistryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all addon registry
     */
    async listAddonRegistryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListAddonRegistryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/addon_registries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListAddonRegistryResponseFromJSON(jsonValue));
    }

    /**
     * list all addon registry
     */
    async listAddonRegistry(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListAddonRegistryResponse> {
        const response = await this.listAddonRegistryRaw(initOverrides);
        return await response.value();
    }

    /**
     * update an addon registry
     */
    async updateAddonRegistryRaw(requestParameters: UpdateAddonRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddonRegistry>> {
        if (requestParameters.addonRegName === null || requestParameters.addonRegName === undefined) {
            throw new runtime.RequiredError('addonRegName','Required parameter requestParameters.addonRegName was null or undefined when calling updateAddonRegistry.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateAddonRegistry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/addon_registries/{addonRegName}`.replace(`{${"addonRegName"}}`, encodeURIComponent(String(requestParameters.addonRegName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateAddonRegistryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddonRegistryFromJSON(jsonValue));
    }

    /**
     * update an addon registry
     */
    async updateAddonRegistry(requestParameters: UpdateAddonRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddonRegistry> {
        const response = await this.updateAddonRegistryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
