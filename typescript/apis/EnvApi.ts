/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1CreateEnvRequest,
  V1Env,
  V1ListEnvResponse,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1CreateEnvRequestFromJSON,
    V1CreateEnvRequestToJSON,
    V1EnvFromJSON,
    V1EnvToJSON,
    V1ListEnvResponseFromJSON,
    V1ListEnvResponseToJSON,
} from '../models/index';

export interface EnvcreateRequest {
    body: V1CreateEnvRequest;
}

export interface EnvdeleteRequest {
    envName: string;
}

export interface EnvupdateRequest {
    envName: string;
    body: V1CreateEnvRequest;
}

/**
 *
 */
export class EnvApi extends runtime.BaseAPI {

    /**
     * create an env
     */
    async envcreateRaw(requestParameters: EnvcreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Env>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling envcreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/envs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateEnvRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1EnvFromJSON(jsonValue));
    }

    /**
     * create an env
     */
    async envcreate(requestParameters: EnvcreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Env> {
        const response = await this.envcreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete one env
     */
    async envdeleteRaw(requestParameters: EnvdeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.envName === null || requestParameters.envName === undefined) {
            throw new runtime.RequiredError('envName','Required parameter requestParameters.envName was null or undefined when calling envdelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/envs/{envName}`.replace(`{${"envName"}}`, encodeURIComponent(String(requestParameters.envName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete one env
     */
    async envdelete(requestParameters: EnvdeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.envdeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all envs
     */
    async envlistRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListEnvResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/envs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListEnvResponseFromJSON(jsonValue));
    }

    /**
     * list all envs
     */
    async envlist(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListEnvResponse> {
        const response = await this.envlistRaw(initOverrides);
        return await response.value();
    }

    /**
     * update an env
     */
    async envupdateRaw(requestParameters: EnvupdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Env>> {
        if (requestParameters.envName === null || requestParameters.envName === undefined) {
            throw new runtime.RequiredError('envName','Required parameter requestParameters.envName was null or undefined when calling envupdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling envupdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/envs/{envName}`.replace(`{${"envName"}}`, encodeURIComponent(String(requestParameters.envName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateEnvRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1EnvFromJSON(jsonValue));
    }

    /**
     * update an env
     */
    async envupdate(requestParameters: EnvupdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Env> {
        const response = await this.envupdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
