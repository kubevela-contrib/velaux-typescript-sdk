/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1AddProjectUserRequest,
  V1Config,
  V1ConfigTemplateDetail,
  V1CreateConfigDistributionRequest,
  V1CreateConfigRequest,
  V1CreateProjectRequest,
  V1CreateRoleRequest,
  V1ListConfigDistributionResponse,
  V1ListConfigResponse,
  V1ListConfigTemplateResponse,
  V1ListProjectResponse,
  V1ListProjectUsersResponse,
  V1ListRolesResponse,
  V1ListTerraformProviderResponse,
  V1PermissionBase,
  V1ProjectBase,
  V1ProjectUserBase,
  V1RoleBase,
  V1UpdateConfigRequest,
  V1UpdateProjectRequest,
  V1UpdateProjectUserRequest,
  V1UpdateRoleRequest,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1AddProjectUserRequestFromJSON,
    V1AddProjectUserRequestToJSON,
    V1ConfigFromJSON,
    V1ConfigToJSON,
    V1ConfigTemplateDetailFromJSON,
    V1ConfigTemplateDetailToJSON,
    V1CreateConfigDistributionRequestFromJSON,
    V1CreateConfigDistributionRequestToJSON,
    V1CreateConfigRequestFromJSON,
    V1CreateConfigRequestToJSON,
    V1CreateProjectRequestFromJSON,
    V1CreateProjectRequestToJSON,
    V1CreateRoleRequestFromJSON,
    V1CreateRoleRequestToJSON,
    V1ListConfigDistributionResponseFromJSON,
    V1ListConfigDistributionResponseToJSON,
    V1ListConfigResponseFromJSON,
    V1ListConfigResponseToJSON,
    V1ListConfigTemplateResponseFromJSON,
    V1ListConfigTemplateResponseToJSON,
    V1ListProjectResponseFromJSON,
    V1ListProjectResponseToJSON,
    V1ListProjectUsersResponseFromJSON,
    V1ListProjectUsersResponseToJSON,
    V1ListRolesResponseFromJSON,
    V1ListRolesResponseToJSON,
    V1ListTerraformProviderResponseFromJSON,
    V1ListTerraformProviderResponseToJSON,
    V1PermissionBaseFromJSON,
    V1PermissionBaseToJSON,
    V1ProjectBaseFromJSON,
    V1ProjectBaseToJSON,
    V1ProjectUserBaseFromJSON,
    V1ProjectUserBaseToJSON,
    V1RoleBaseFromJSON,
    V1RoleBaseToJSON,
    V1UpdateConfigRequestFromJSON,
    V1UpdateConfigRequestToJSON,
    V1UpdateProjectRequestFromJSON,
    V1UpdateProjectRequestToJSON,
    V1UpdateProjectUserRequestFromJSON,
    V1UpdateProjectUserRequestToJSON,
    V1UpdateRoleRequestFromJSON,
    V1UpdateRoleRequestToJSON,
} from '../models/index';

export interface ApplyDistributionRequest {
    projectName: string;
    body: V1CreateConfigDistributionRequest;
}

export interface CreateProjectRequest {
    body: V1CreateProjectRequest;
}

export interface CreateProjectConfigRequest {
    projectName: string;
    body: V1CreateConfigRequest;
}

export interface CreateProjectPermissionRequest {
    projectName: string;
}

export interface CreateProjectRoleRequest {
    projectName: string;
    body: V1CreateRoleRequest;
}

export interface CreateProjectUserRequest {
    projectName: string;
    body: V1AddProjectUserRequest;
}

export interface DeleteDistributionRequest {
    projectName: string;
    distributionName: string;
}

export interface DeleteProjectRequest {
    projectName: string;
}

export interface DeleteProjectConfigRequest {
    projectName: string;
    configName: string;
}

export interface DeleteProjectPermissionRequest {
    projectName: string;
    permissionName: string;
}

export interface DeleteProjectRoleRequest {
    projectName: string;
    roleName: string;
}

export interface DeleteProjectUserRequest {
    projectName: string;
    userName: string;
    body: V1UpdateProjectUserRequest;
}

export interface DetailConfigRequest {
    projectName: string;
    configName: string;
    body: V1UpdateConfigRequest;
}

export interface DetailProjectRequest {
    projectName: string;
}

export interface GetConfigTemplateByTemplateNameRequest {
    projectName: string;
    templateName: string;
    namespace?: string;
}

export interface GetConfigTemplatesRequest {
    projectName: string;
    namespace: string;
}

export interface GetProjectConfigsRequest {
    projectName: string;
    template?: string;
}

export interface GetProvidersRequest {
    projectName: string;
}

export interface ListDistributionsRequest {
    projectName: string;
}

export interface ListProjectPermissionsRequest {
    projectName: string;
}

export interface ListProjectRolesRequest {
    projectName: string;
}

export interface ListProjectTargetsRequest {
    projectName: string;
}

export interface ListProjectUserRequest {
    projectName: string;
}

export interface UpdateProjectRequest {
    projectName: string;
    body: V1UpdateProjectRequest;
}

export interface UpdateProjectConfigRequest {
    projectName: string;
    configName: string;
    body: V1UpdateConfigRequest;
}

export interface UpdateProjectRoleRequest {
    projectName: string;
    roleName: string;
    body: V1UpdateRoleRequest;
}

export interface UpdateProjectUserRequest {
    projectName: string;
    userName: string;
    body: V1UpdateProjectUserRequest;
}

/**
 *
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     * apply the distribution job of the config
     */
    async applyDistributionRaw(requestParameters: ApplyDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling applyDistribution.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling applyDistribution.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/distributions`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateConfigDistributionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * apply the distribution job of the config
     */
    async applyDistribution(requestParameters: ApplyDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.applyDistributionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a project
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ProjectBase>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateProjectRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ProjectBaseFromJSON(jsonValue));
    }

    /**
     * create a project
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ProjectBase> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a config in a project
     */
    async createProjectConfigRaw(requestParameters: CreateProjectConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Config>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createProjectConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProjectConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/configs`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateConfigRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ConfigFromJSON(jsonValue));
    }

    /**
     * create a config in a project
     */
    async createProjectConfig(requestParameters: CreateProjectConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Config> {
        const response = await this.createProjectConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a project level perm policy
     */
    async createProjectPermissionRaw(requestParameters: CreateProjectPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V1PermissionBase>>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createProjectPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/permissions`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V1PermissionBaseFromJSON));
    }

    /**
     * create a project level perm policy
     */
    async createProjectPermission(requestParameters: CreateProjectPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V1PermissionBase>> {
        const response = await this.createProjectPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create project level role
     */
    async createProjectRoleRaw(requestParameters: CreateProjectRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1RoleBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createProjectRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProjectRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/roles`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateRoleRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RoleBaseFromJSON(jsonValue));
    }

    /**
     * create project level role
     */
    async createProjectRole(requestParameters: CreateProjectRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1RoleBase> {
        const response = await this.createProjectRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * add a user to a project
     */
    async createProjectUserRaw(requestParameters: CreateProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ProjectUserBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createProjectUser.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createProjectUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/users`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1AddProjectUserRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ProjectUserBaseFromJSON(jsonValue));
    }

    /**
     * add a user to a project
     */
    async createProjectUser(requestParameters: CreateProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ProjectUserBase> {
        const response = await this.createProjectUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a distribution job of the config
     */
    async deleteDistributionRaw(requestParameters: DeleteDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteDistribution.');
        }

        if (requestParameters.distributionName === null || requestParameters.distributionName === undefined) {
            throw new runtime.RequiredError('distributionName','Required parameter requestParameters.distributionName was null or undefined when calling deleteDistribution.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/distributions/{distributionName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"distributionName"}}`, encodeURIComponent(String(requestParameters.distributionName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete a distribution job of the config
     */
    async deleteDistribution(requestParameters: DeleteDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteDistributionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a project
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete a project
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a config from a project
     */
    async deleteProjectConfigRaw(requestParameters: DeleteProjectConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteProjectConfig.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling deleteProjectConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/configs/{configName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete a config from a project
     */
    async deleteProjectConfig(requestParameters: DeleteProjectConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteProjectConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a project level perm policy
     */
    async deleteProjectPermissionRaw(requestParameters: DeleteProjectPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V1PermissionBase>>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteProjectPermission.');
        }

        if (requestParameters.permissionName === null || requestParameters.permissionName === undefined) {
            throw new runtime.RequiredError('permissionName','Required parameter requestParameters.permissionName was null or undefined when calling deleteProjectPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/permissions/{permissionName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"permissionName"}}`, encodeURIComponent(String(requestParameters.permissionName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V1PermissionBaseFromJSON));
    }

    /**
     * delete a project level perm policy
     */
    async deleteProjectPermission(requestParameters: DeleteProjectPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V1PermissionBase>> {
        const response = await this.deleteProjectPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete project level role
     */
    async deleteProjectRoleRaw(requestParameters: DeleteProjectRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteProjectRole.');
        }

        if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
            throw new runtime.RequiredError('roleName','Required parameter requestParameters.roleName was null or undefined when calling deleteProjectRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/roles/{roleName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"roleName"}}`, encodeURIComponent(String(requestParameters.roleName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete project level role
     */
    async deleteProjectRole(requestParameters: DeleteProjectRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteProjectRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a user from a project
     */
    async deleteProjectUserRaw(requestParameters: DeleteProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteProjectUser.');
        }

        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling deleteProjectUser.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteProjectUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/users/{userName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateProjectUserRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete a user from a project
     */
    async deleteProjectUser(requestParameters: DeleteProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteProjectUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail a config in a project
     */
    async detailConfigRaw(requestParameters: DetailConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Config>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling detailConfig.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling detailConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling detailConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/configs/{configName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateConfigRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ConfigFromJSON(jsonValue));
    }

    /**
     * detail a config in a project
     */
    async detailConfig(requestParameters: DetailConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Config> {
        const response = await this.detailConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * detail a project
     */
    async detailProjectRaw(requestParameters: DetailProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ProjectBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling detailProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ProjectBaseFromJSON(jsonValue));
    }

    /**
     * detail a project
     */
    async detailProject(requestParameters: DetailProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ProjectBase> {
        const response = await this.detailProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detail a template
     */
    async getConfigTemplateByTemplateNameRaw(requestParameters: GetConfigTemplateByTemplateNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ConfigTemplateDetail>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getConfigTemplateByTemplateName.');
        }

        if (requestParameters.templateName === null || requestParameters.templateName === undefined) {
            throw new runtime.RequiredError('templateName','Required parameter requestParameters.templateName was null or undefined when calling getConfigTemplateByTemplateName.');
        }

        const queryParameters: any = {};

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/config_templates/{templateName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"templateName"}}`, encodeURIComponent(String(requestParameters.templateName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ConfigTemplateDetailFromJSON(jsonValue));
    }

    /**
     * Detail a template
     */
    async getConfigTemplateByTemplateName(requestParameters: GetConfigTemplateByTemplateNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ConfigTemplateDetail> {
        const response = await this.getConfigTemplateByTemplateNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get the templates which are in a project
     */
    async getConfigTemplatesRaw(requestParameters: GetConfigTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListConfigTemplateResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getConfigTemplates.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getConfigTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/config_templates`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListConfigTemplateResponseFromJSON(jsonValue));
    }

    /**
     * get the templates which are in a project
     */
    async getConfigTemplates(requestParameters: GetConfigTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListConfigTemplateResponse> {
        const response = await this.getConfigTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get configs which are in a project
     */
    async getProjectConfigsRaw(requestParameters: GetProjectConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListConfigResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getProjectConfigs.');
        }

        const queryParameters: any = {};

        if (requestParameters.template !== undefined) {
            queryParameters['template'] = requestParameters.template;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/configs`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListConfigResponseFromJSON(jsonValue));
    }

    /**
     * get configs which are in a project
     */
    async getProjectConfigs(requestParameters: GetProjectConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListConfigResponse> {
        const response = await this.getProjectConfigsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get providers which are in a project
     */
    async getProvidersRaw(requestParameters: GetProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListTerraformProviderResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getProviders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/providers`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListTerraformProviderResponseFromJSON(jsonValue));
    }

    /**
     * get providers which are in a project
     */
    async getProviders(requestParameters: GetProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListTerraformProviderResponse> {
        const response = await this.getProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list the distribution jobs of the config
     */
    async listDistributionsRaw(requestParameters: ListDistributionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListConfigDistributionResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling listDistributions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/distributions`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListConfigDistributionResponseFromJSON(jsonValue));
    }

    /**
     * list the distribution jobs of the config
     */
    async listDistributions(requestParameters: ListDistributionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListConfigDistributionResponse> {
        const response = await this.listDistributionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all project level perm policies
     */
    async listProjectPermissionsRaw(requestParameters: ListProjectPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V1PermissionBase>>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling listProjectPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/permissions`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V1PermissionBaseFromJSON));
    }

    /**
     * list all project level perm policies
     */
    async listProjectPermissions(requestParameters: ListProjectPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V1PermissionBase>> {
        const response = await this.listProjectPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all project level roles
     */
    async listProjectRolesRaw(requestParameters: ListProjectRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListRolesResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling listProjectRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/roles`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListRolesResponseFromJSON(jsonValue));
    }

    /**
     * list all project level roles
     */
    async listProjectRoles(requestParameters: ListProjectRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListRolesResponse> {
        const response = await this.listProjectRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get targets list belong to a project
     */
    async listProjectTargetsRaw(requestParameters: ListProjectTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling listProjectTargets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/targets`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get targets list belong to a project
     */
    async listProjectTargets(requestParameters: ListProjectTargetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.listProjectTargetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all users belong to a project
     */
    async listProjectUserRaw(requestParameters: ListProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListProjectUsersResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling listProjectUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/users`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListProjectUsersResponseFromJSON(jsonValue));
    }

    /**
     * list all users belong to a project
     */
    async listProjectUser(requestParameters: ListProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListProjectUsersResponse> {
        const response = await this.listProjectUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all projects
     */
    async listProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListProjectResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListProjectResponseFromJSON(jsonValue));
    }

    /**
     * list all projects
     */
    async listProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListProjectResponse> {
        const response = await this.listProjectsRaw(initOverrides);
        return await response.value();
    }

    /**
     * update a project
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ProjectBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling updateProject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateProjectRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ProjectBaseFromJSON(jsonValue));
    }

    /**
     * update a project
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ProjectBase> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update a config in a project
     */
    async updateProjectConfigRaw(requestParameters: UpdateProjectConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Config>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling updateProjectConfig.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling updateProjectConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateProjectConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/configs/{configName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateConfigRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ConfigFromJSON(jsonValue));
    }

    /**
     * update a config in a project
     */
    async updateProjectConfig(requestParameters: UpdateProjectConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Config> {
        const response = await this.updateProjectConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update project level role
     */
    async updateProjectRoleRaw(requestParameters: UpdateProjectRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1RoleBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling updateProjectRole.');
        }

        if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
            throw new runtime.RequiredError('roleName','Required parameter requestParameters.roleName was null or undefined when calling updateProjectRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateProjectRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/roles/{roleName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"roleName"}}`, encodeURIComponent(String(requestParameters.roleName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateRoleRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RoleBaseFromJSON(jsonValue));
    }

    /**
     * update project level role
     */
    async updateProjectRole(requestParameters: UpdateProjectRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1RoleBase> {
        const response = await this.updateProjectRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update a user from a project
     */
    async updateProjectUserRaw(requestParameters: UpdateProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ProjectUserBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling updateProjectUser.');
        }

        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling updateProjectUser.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateProjectUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/users/{userName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateProjectUserRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ProjectUserBaseFromJSON(jsonValue));
    }

    /**
     * update a user from a project
     */
    async updateProjectUser(requestParameters: UpdateProjectUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ProjectUserBase> {
        const response = await this.updateProjectUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
