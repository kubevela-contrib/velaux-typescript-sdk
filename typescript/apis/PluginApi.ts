/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1InstallPluginRequest,
  V1ListPluginResponse,
  V1ManagedPluginDTO,
  V1PluginDTO,
  V1PluginEnableRequest,
} from '../models/index';
import {
    V1InstallPluginRequestFromJSON,
    V1InstallPluginRequestToJSON,
    V1ListPluginResponseFromJSON,
    V1ListPluginResponseToJSON,
    V1ManagedPluginDTOFromJSON,
    V1ManagedPluginDTOToJSON,
    V1PluginDTOFromJSON,
    V1PluginDTOToJSON,
    V1PluginEnableRequestFromJSON,
    V1PluginEnableRequestToJSON,
} from '../models/index';

export interface DetailPluginRequest {
    pluginId: string;
}

export interface DisablePluginRequest {
    pluginId: string;
}

export interface EnablePluginRequest {
    pluginId: string;
    body: V1PluginEnableRequest;
}

export interface InstallPluginRequest {
    pluginId: string;
    body: V1InstallPluginRequest;
}

export interface ManageDetailPluginRequest {
    pluginId: string;
}

export interface PluginSettingRequest {
    pluginId: string;
}

export interface UninstallPluginRequest {
    pluginId: string;
}

/**
 *
 */
export class PluginApi extends runtime.BaseAPI {

    /**
     * Detail an installed plugin
     */
    async detailPluginRaw(requestParameters: DetailPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PluginDTO>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling detailPlugin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/plugins/{pluginId}`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PluginDTOFromJSON(jsonValue));
    }

    /**
     * Detail an installed plugin
     */
    async detailPlugin(requestParameters: DetailPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PluginDTO> {
        const response = await this.detailPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable an installed plugin
     */
    async disablePluginRaw(requestParameters: DisablePluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ManagedPluginDTO>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling disablePlugin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/manage/plugins/{pluginId}/disable`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ManagedPluginDTOFromJSON(jsonValue));
    }

    /**
     * Disable an installed plugin
     */
    async disablePlugin(requestParameters: DisablePluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ManagedPluginDTO> {
        const response = await this.disablePluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable an installed plugin
     */
    async enablePluginRaw(requestParameters: EnablePluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ManagedPluginDTO>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling enablePlugin.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling enablePlugin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/manage/plugins/{pluginId}/enable`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PluginEnableRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ManagedPluginDTOFromJSON(jsonValue));
    }

    /**
     * Enable an installed plugin
     */
    async enablePlugin(requestParameters: EnablePluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ManagedPluginDTO> {
        const response = await this.enablePluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Install one specific plugin
     */
    async installPluginRaw(requestParameters: InstallPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ManagedPluginDTO>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling installPlugin.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling installPlugin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/manage/plugins/{pluginId}/install`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1InstallPluginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ManagedPluginDTOFromJSON(jsonValue));
    }

    /**
     * Install one specific plugin
     */
    async installPlugin(requestParameters: InstallPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ManagedPluginDTO> {
        const response = await this.installPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the enabled plugins
     */
    async listEnabledPluginsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListPluginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/plugins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListPluginResponseFromJSON(jsonValue));
    }

    /**
     * List the enabled plugins
     */
    async listEnabledPlugins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListPluginResponse> {
        const response = await this.listEnabledPluginsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List the installed plugins
     */
    async listInstalledPluginsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListPluginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/manage/plugins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListPluginResponseFromJSON(jsonValue));
    }

    /**
     * List the installed plugins
     */
    async listInstalledPlugins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListPluginResponse> {
        const response = await this.listInstalledPluginsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Detail an installed plugin
     */
    async manageDetailPluginRaw(requestParameters: ManageDetailPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ManagedPluginDTO>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling manageDetailPlugin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/manage/plugins/{pluginId}`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ManagedPluginDTOFromJSON(jsonValue));
    }

    /**
     * Detail an installed plugin
     */
    async manageDetailPlugin(requestParameters: ManageDetailPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ManagedPluginDTO> {
        const response = await this.manageDetailPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set an installed plugin
     */
    async pluginSettingRaw(requestParameters: PluginSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ManagedPluginDTO>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling pluginSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/manage/plugins/{pluginId}/setting`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ManagedPluginDTOFromJSON(jsonValue));
    }

    /**
     * Set an installed plugin
     */
    async pluginSetting(requestParameters: PluginSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ManagedPluginDTO> {
        const response = await this.pluginSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uninstall one specific plugin
     */
    async uninstallPluginRaw(requestParameters: UninstallPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling uninstallPlugin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/manage/plugins/{pluginId}/uninstall`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Uninstall one specific plugin
     */
    async uninstallPlugin(requestParameters: UninstallPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.uninstallPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
