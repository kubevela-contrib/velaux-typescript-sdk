/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1CreatePermissionRequest,
  V1CreateRoleRequest,
  V1ListRolesResponse,
  V1PermissionBase,
  V1RoleBase,
  V1UpdateRoleRequest,
} from '../models/index';
import {
    V1CreatePermissionRequestFromJSON,
    V1CreatePermissionRequestToJSON,
    V1CreateRoleRequestFromJSON,
    V1CreateRoleRequestToJSON,
    V1ListRolesResponseFromJSON,
    V1ListRolesResponseToJSON,
    V1PermissionBaseFromJSON,
    V1PermissionBaseToJSON,
    V1RoleBaseFromJSON,
    V1RoleBaseToJSON,
    V1UpdateRoleRequestFromJSON,
    V1UpdateRoleRequestToJSON,
} from '../models/index';

export interface CreatePlatformPermissionRequest {
    body: V1CreatePermissionRequest;
}

export interface CreatePlatformRoleRequest {
    body: V1CreateRoleRequest;
}

export interface DeletePlatformPermissionRequest {
    permissionName: string;
}

export interface DeletePlatformRoleRequest {
    roleName: string;
}

export interface UpdatePlatformRoleRequest {
    roleName: string;
    body: V1UpdateRoleRequest;
}

/**
 *
 */
export class RbacApi extends runtime.BaseAPI {

    /**
     * create the platform perm policy
     */
    async createPlatformPermissionRaw(requestParameters: CreatePlatformPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PermissionBase>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPlatformPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/permissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreatePermissionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PermissionBaseFromJSON(jsonValue));
    }

    /**
     * create the platform perm policy
     */
    async createPlatformPermission(requestParameters: CreatePlatformPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PermissionBase> {
        const response = await this.createPlatformPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create platform level role
     */
    async createPlatformRoleRaw(requestParameters: CreatePlatformRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1RoleBase>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPlatformRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateRoleRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RoleBaseFromJSON(jsonValue));
    }

    /**
     * create platform level role
     */
    async createPlatformRole(requestParameters: CreatePlatformRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1RoleBase> {
        const response = await this.createPlatformRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a platform perm policy
     */
    async deletePlatformPermissionRaw(requestParameters: DeletePlatformPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.permissionName === null || requestParameters.permissionName === undefined) {
            throw new runtime.RequiredError('permissionName','Required parameter requestParameters.permissionName was null or undefined when calling deletePlatformPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/permissions/{permissionName}`.replace(`{${"permissionName"}}`, encodeURIComponent(String(requestParameters.permissionName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * delete a platform perm policy
     */
    async deletePlatformPermission(requestParameters: DeletePlatformPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deletePlatformPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update platform level role
     */
    async deletePlatformRoleRaw(requestParameters: DeletePlatformRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
            throw new runtime.RequiredError('roleName','Required parameter requestParameters.roleName was null or undefined when calling deletePlatformRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/roles/{roleName}`.replace(`{${"roleName"}}`, encodeURIComponent(String(requestParameters.roleName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * update platform level role
     */
    async deletePlatformRole(requestParameters: DeletePlatformRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deletePlatformRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list all platform level perm policies
     */
    async listPlatformPermissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V1PermissionBase>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V1PermissionBaseFromJSON));
    }

    /**
     * list all platform level perm policies
     */
    async listPlatformPermissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V1PermissionBase>> {
        const response = await this.listPlatformPermissionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * list all platform level roles
     */
    async listPlatformRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListRolesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListRolesResponseFromJSON(jsonValue));
    }

    /**
     * list all platform level roles
     */
    async listPlatformRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListRolesResponse> {
        const response = await this.listPlatformRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     * update platform level role
     */
    async updatePlatformRoleRaw(requestParameters: UpdatePlatformRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1RoleBase>> {
        if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
            throw new runtime.RequiredError('roleName','Required parameter requestParameters.roleName was null or undefined when calling updatePlatformRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePlatformRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/roles/{roleName}`.replace(`{${"roleName"}}`, encodeURIComponent(String(requestParameters.roleName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateRoleRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RoleBaseFromJSON(jsonValue));
    }

    /**
     * update platform level role
     */
    async updatePlatformRole(requestParameters: UpdatePlatformRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1RoleBase> {
        const response = await this.updatePlatformRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
