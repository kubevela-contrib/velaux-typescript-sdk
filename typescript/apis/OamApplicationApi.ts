/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1ApplicationRequest,
  V1ApplicationResponse,
} from '../models/index';
import {
    V1ApplicationRequestFromJSON,
    V1ApplicationRequestToJSON,
    V1ApplicationResponseFromJSON,
    V1ApplicationResponseToJSON,
} from '../models/index';

export interface CreateOrUpdateApplicationRequest {
    namespace: string;
    appname: string;
    body: V1ApplicationRequest;
    dryRun?: string;
}

export interface DeleteOAMApplicationRequest {
    namespace: string;
    appname: string;
}

export interface GetApplicationRequest {
    namespace: string;
    appname: string;
}

/**
 *
 */
export class OamApplicationApi extends runtime.BaseAPI {

    /**
     * create or update oam application in the specified namespace
     */
    async createOrUpdateApplicationRaw(requestParameters: CreateOrUpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createOrUpdateApplication.');
        }

        if (requestParameters.appname === null || requestParameters.appname === undefined) {
            throw new runtime.RequiredError('appname','Required parameter requestParameters.appname was null or undefined when calling createOrUpdateApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrUpdateApplication.');
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/namespaces/{namespace}/applications/{appname}`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"appname"}}`, encodeURIComponent(String(requestParameters.appname))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ApplicationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create or update oam application in the specified namespace
     */
    async createOrUpdateApplication(requestParameters: CreateOrUpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createOrUpdateApplicationRaw(requestParameters, initOverrides);
    }

    /**
     * create or update oam application in the specified namespace
     */
    async deleteOAMApplicationRaw(requestParameters: DeleteOAMApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteOAMApplication.');
        }

        if (requestParameters.appname === null || requestParameters.appname === undefined) {
            throw new runtime.RequiredError('appname','Required parameter requestParameters.appname was null or undefined when calling deleteOAMApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/namespaces/{namespace}/applications/{appname}`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"appname"}}`, encodeURIComponent(String(requestParameters.appname))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create or update oam application in the specified namespace
     */
    async deleteOAMApplication(requestParameters: DeleteOAMApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOAMApplicationRaw(requestParameters, initOverrides);
    }

    /**
     * get the specified oam application in the specified namespace
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ApplicationResponse>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getApplication.');
        }

        if (requestParameters.appname === null || requestParameters.appname === undefined) {
            throw new runtime.RequiredError('appname','Required parameter requestParameters.appname was null or undefined when calling getApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/namespaces/{namespace}/applications/{appname}`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"appname"}}`, encodeURIComponent(String(requestParameters.appname))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ApplicationResponseFromJSON(jsonValue));
    }

    /**
     * get the specified oam application in the specified namespace
     */
    async getApplication(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ApplicationResponse> {
        const response = await this.getApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
