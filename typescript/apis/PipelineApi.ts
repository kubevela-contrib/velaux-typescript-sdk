/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1Context,
  V1ContextNameResponse,
  V1CreateContextValuesRequest,
  V1CreatePipelineRequest,
  V1GetPipelineResponse,
  V1GetPipelineRunInputResponse,
  V1GetPipelineRunLogResponse,
  V1GetPipelineRunOutputResponse,
  V1ListContextValueResponse,
  V1ListPipelineResponse,
  V1ListPipelineRunResponse,
  V1PipelineBase,
  V1PipelineMetaResponse,
  V1PipelineRun,
  V1PipelineRunBase,
  V1PipelineRunMeta,
  V1RunPipelineRequest,
  V1UpdateContextValuesRequest,
  V1UpdatePipelineRequest,
  V1alpha1WorkflowRunStatus,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1ContextFromJSON,
    V1ContextToJSON,
    V1ContextNameResponseFromJSON,
    V1ContextNameResponseToJSON,
    V1CreateContextValuesRequestFromJSON,
    V1CreateContextValuesRequestToJSON,
    V1CreatePipelineRequestFromJSON,
    V1CreatePipelineRequestToJSON,
    V1GetPipelineResponseFromJSON,
    V1GetPipelineResponseToJSON,
    V1GetPipelineRunInputResponseFromJSON,
    V1GetPipelineRunInputResponseToJSON,
    V1GetPipelineRunLogResponseFromJSON,
    V1GetPipelineRunLogResponseToJSON,
    V1GetPipelineRunOutputResponseFromJSON,
    V1GetPipelineRunOutputResponseToJSON,
    V1ListContextValueResponseFromJSON,
    V1ListContextValueResponseToJSON,
    V1ListPipelineResponseFromJSON,
    V1ListPipelineResponseToJSON,
    V1ListPipelineRunResponseFromJSON,
    V1ListPipelineRunResponseToJSON,
    V1PipelineBaseFromJSON,
    V1PipelineBaseToJSON,
    V1PipelineMetaResponseFromJSON,
    V1PipelineMetaResponseToJSON,
    V1PipelineRunFromJSON,
    V1PipelineRunToJSON,
    V1PipelineRunBaseFromJSON,
    V1PipelineRunBaseToJSON,
    V1PipelineRunMetaFromJSON,
    V1PipelineRunMetaToJSON,
    V1RunPipelineRequestFromJSON,
    V1RunPipelineRequestToJSON,
    V1UpdateContextValuesRequestFromJSON,
    V1UpdateContextValuesRequestToJSON,
    V1UpdatePipelineRequestFromJSON,
    V1UpdatePipelineRequestToJSON,
    V1alpha1WorkflowRunStatusFromJSON,
    V1alpha1WorkflowRunStatusToJSON,
} from '../models/index';

export interface CreateContextValueRequest {
    projectName: string;
    pipelineName: string;
    body: V1CreateContextValuesRequest;
}

export interface CreatePipelineRequest {
    projectName: string;
    body: V1CreatePipelineRequest;
}

export interface DeleteContextValueRequest {
    projectName: string;
    pipelineName: string;
    contextName: string;
}

export interface DeletePipelineRequest {
    projectName: string;
    pipelineName: string;
}

export interface DeletePipelineRunRequest {
    projectName: string;
    pipelineName: string;
    runName: string;
}

export interface GetPipelineRequest {
    pipelineName: string;
    projectName: string;
}

export interface GetPipelineRunRequest {
    projectName: string;
    pipelineName: string;
    runName: string;
}

export interface GetPipelineRunInputRequest {
    step: string;
    projectName: string;
    pipelineName: string;
    runName: string;
}

export interface GetPipelineRunLogRequest {
    projectName: string;
    pipelineName: string;
    runName: string;
    step?: string;
}

export interface GetPipelineRunOutputRequest {
    step: string;
    projectName: string;
    pipelineName: string;
    runName: string;
}

export interface GetPipelineRunStatusRequest {
    projectName: string;
    pipelineName: string;
    runName: string;
}

export interface ListContextValuesRequest {
    projectName: string;
    pipelineName: string;
}

export interface ListPipelineRunsRequest {
    projectName: string;
    pipelineName: string;
    status?: string;
}

export interface ListPipelinesRequest {
    query?: string;
    projectName?: string;
    detailed?: boolean;
}

export interface ResumePipelineRunRequest {
    projectName: string;
    pipelineName: string;
    runName: string;
    step?: string;
}

export interface RunPipelineRequest {
    projectName: string;
    pipelineName: string;
    body: V1RunPipelineRequest;
}

export interface StopPipelineRequest {
    projectName: string;
    pipelineName: string;
    runName: string;
}

export interface TerminatePipelineRunRequest {
    projectName: string;
    pipelineName: string;
    runName: string;
}

export interface UpdateContextValueRequest {
    projectName: string;
    pipelineName: string;
    contextName: string;
    body: V1UpdateContextValuesRequest;
}

export interface UpdatePipelineRequest {
    projectName: string;
    pipelineName: string;
    body: V1UpdatePipelineRequest;
}

/**
 *
 */
export class PipelineApi extends runtime.BaseAPI {

    /**
     * create pipeline context values
     */
    async createContextValueRaw(requestParameters: CreateContextValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Context>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createContextValue.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling createContextValue.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createContextValue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateContextValuesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ContextFromJSON(jsonValue));
    }

    /**
     * create pipeline context values
     */
    async createContextValue(requestParameters: CreateContextValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Context> {
        const response = await this.createContextValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create pipeline
     */
    async createPipelineRaw(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PipelineBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling createPipeline.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreatePipelineRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PipelineBaseFromJSON(jsonValue));
    }

    /**
     * create pipeline
     */
    async createPipeline(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PipelineBase> {
        const response = await this.createPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete pipeline context value
     */
    async deleteContextValueRaw(requestParameters: DeleteContextValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ContextNameResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deleteContextValue.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling deleteContextValue.');
        }

        if (requestParameters.contextName === null || requestParameters.contextName === undefined) {
            throw new runtime.RequiredError('contextName','Required parameter requestParameters.contextName was null or undefined when calling deleteContextValue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts/{contextName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"contextName"}}`, encodeURIComponent(String(requestParameters.contextName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ContextNameResponseFromJSON(jsonValue));
    }

    /**
     * delete pipeline context value
     */
    async deleteContextValue(requestParameters: DeleteContextValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ContextNameResponse> {
        const response = await this.deleteContextValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete pipeline
     */
    async deletePipelineRaw(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PipelineMetaResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deletePipeline.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling deletePipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PipelineMetaResponseFromJSON(jsonValue));
    }

    /**
     * delete pipeline
     */
    async deletePipeline(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PipelineMetaResponse> {
        const response = await this.deletePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete pipeline run
     */
    async deletePipelineRunRaw(requestParameters: DeletePipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PipelineRunMeta>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling deletePipelineRun.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling deletePipelineRun.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling deletePipelineRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PipelineRunMetaFromJSON(jsonValue));
    }

    /**
     * delete pipeline run
     */
    async deletePipelineRun(requestParameters: DeletePipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PipelineRunMeta> {
        const response = await this.deletePipelineRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get pipeline
     */
    async getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPipelineResponse>> {
        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling getPipeline.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}`.replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPipelineResponseFromJSON(jsonValue));
    }

    /**
     * get pipeline
     */
    async getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPipelineResponse> {
        const response = await this.getPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get pipeline run
     */
    async getPipelineRunRaw(requestParameters: GetPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PipelineRunBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getPipelineRun.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling getPipelineRun.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling getPipelineRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PipelineRunBaseFromJSON(jsonValue));
    }

    /**
     * get pipeline run
     */
    async getPipelineRun(requestParameters: GetPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PipelineRunBase> {
        const response = await this.getPipelineRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get pipeline run input
     */
    async getPipelineRunInputRaw(requestParameters: GetPipelineRunInputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPipelineRunInputResponse>> {
        if (requestParameters.step === null || requestParameters.step === undefined) {
            throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling getPipelineRunInput.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getPipelineRunInput.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling getPipelineRunInput.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling getPipelineRunInput.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/input`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPipelineRunInputResponseFromJSON(jsonValue));
    }

    /**
     * get pipeline run input
     */
    async getPipelineRunInput(requestParameters: GetPipelineRunInputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPipelineRunInputResponse> {
        const response = await this.getPipelineRunInputRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get pipeline run log
     */
    async getPipelineRunLogRaw(requestParameters: GetPipelineRunLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPipelineRunLogResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getPipelineRunLog.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling getPipelineRunLog.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling getPipelineRunLog.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/log`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPipelineRunLogResponseFromJSON(jsonValue));
    }

    /**
     * get pipeline run log
     */
    async getPipelineRunLog(requestParameters: GetPipelineRunLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPipelineRunLogResponse> {
        const response = await this.getPipelineRunLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get pipeline run output
     */
    async getPipelineRunOutputRaw(requestParameters: GetPipelineRunOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPipelineRunOutputResponse>> {
        if (requestParameters.step === null || requestParameters.step === undefined) {
            throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling getPipelineRunOutput.');
        }

        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getPipelineRunOutput.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling getPipelineRunOutput.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling getPipelineRunOutput.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/output`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPipelineRunOutputResponseFromJSON(jsonValue));
    }

    /**
     * get pipeline run output
     */
    async getPipelineRunOutput(requestParameters: GetPipelineRunOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPipelineRunOutputResponse> {
        const response = await this.getPipelineRunOutputRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get pipeline run status
     */
    async getPipelineRunStatusRaw(requestParameters: GetPipelineRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1alpha1WorkflowRunStatus>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling getPipelineRunStatus.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling getPipelineRunStatus.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling getPipelineRunStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/status`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1WorkflowRunStatusFromJSON(jsonValue));
    }

    /**
     * get pipeline run status
     */
    async getPipelineRunStatus(requestParameters: GetPipelineRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1alpha1WorkflowRunStatus> {
        const response = await this.getPipelineRunStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list pipeline context values
     */
    async listContextValuesRaw(requestParameters: ListContextValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListContextValueResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling listContextValues.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling listContextValues.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListContextValueResponseFromJSON(jsonValue));
    }

    /**
     * list pipeline context values
     */
    async listContextValues(requestParameters: ListContextValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListContextValueResponse> {
        const response = await this.listContextValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list pipeline runs
     */
    async listPipelineRunsRaw(requestParameters: ListPipelineRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListPipelineRunResponse>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling listPipelineRuns.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling listPipelineRuns.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListPipelineRunResponseFromJSON(jsonValue));
    }

    /**
     * list pipeline runs
     */
    async listPipelineRuns(requestParameters: ListPipelineRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListPipelineRunResponse> {
        const response = await this.listPipelineRunsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list pipelines
     */
    async listPipelinesRaw(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListPipelineResponse>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.projectName !== undefined) {
            queryParameters['projectName'] = requestParameters.projectName;
        }

        if (requestParameters.detailed !== undefined) {
            queryParameters['detailed'] = requestParameters.detailed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pipelines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListPipelineResponseFromJSON(jsonValue));
    }

    /**
     * list pipelines
     */
    async listPipelines(requestParameters: ListPipelinesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListPipelineResponse> {
        const response = await this.listPipelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * resume suspend pipeline run
     */
    async resumePipelineRunRaw(requestParameters: ResumePipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling resumePipelineRun.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling resumePipelineRun.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling resumePipelineRun.');
        }

        const queryParameters: any = {};

        if (requestParameters.step !== undefined) {
            queryParameters['step'] = requestParameters.step;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/resume`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * resume suspend pipeline run
     */
    async resumePipelineRun(requestParameters: ResumePipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.resumePipelineRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * run pipeline
     */
    async runPipelineRaw(requestParameters: RunPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PipelineRun>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling runPipeline.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling runPipeline.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling runPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/run`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1RunPipelineRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PipelineRunFromJSON(jsonValue));
    }

    /**
     * run pipeline
     */
    async runPipeline(requestParameters: RunPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PipelineRun> {
        const response = await this.runPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * stop pipeline run
     */
    async stopPipelineRaw(requestParameters: StopPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PipelineRunMeta>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling stopPipeline.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling stopPipeline.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling stopPipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/stop`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PipelineRunMetaFromJSON(jsonValue));
    }

    /**
     * stop pipeline run
     */
    async stopPipeline(requestParameters: StopPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PipelineRunMeta> {
        const response = await this.stopPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * resume suspend pipeline run
     */
    async terminatePipelineRunRaw(requestParameters: TerminatePipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling terminatePipelineRun.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling terminatePipelineRun.');
        }

        if (requestParameters.runName === null || requestParameters.runName === undefined) {
            throw new runtime.RequiredError('runName','Required parameter requestParameters.runName was null or undefined when calling terminatePipelineRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/runs/{runName}/terminate`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"runName"}}`, encodeURIComponent(String(requestParameters.runName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * resume suspend pipeline run
     */
    async terminatePipelineRun(requestParameters: TerminatePipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.terminatePipelineRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update pipeline context value
     */
    async updateContextValueRaw(requestParameters: UpdateContextValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Context>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling updateContextValue.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling updateContextValue.');
        }

        if (requestParameters.contextName === null || requestParameters.contextName === undefined) {
            throw new runtime.RequiredError('contextName','Required parameter requestParameters.contextName was null or undefined when calling updateContextValue.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateContextValue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}/contexts/{contextName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))).replace(`{${"contextName"}}`, encodeURIComponent(String(requestParameters.contextName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateContextValuesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ContextFromJSON(jsonValue));
    }

    /**
     * update pipeline context value
     */
    async updateContextValue(requestParameters: UpdateContextValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Context> {
        const response = await this.updateContextValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update pipeline
     */
    async updatePipelineRaw(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PipelineBase>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling updatePipeline.');
        }

        if (requestParameters.pipelineName === null || requestParameters.pipelineName === undefined) {
            throw new runtime.RequiredError('pipelineName','Required parameter requestParameters.pipelineName was null or undefined when calling updatePipeline.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updatePipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/projects/{projectName}/pipelines/{pipelineName}`.replace(`{${"projectName"}}`, encodeURIComponent(String(requestParameters.projectName))).replace(`{${"pipelineName"}}`, encodeURIComponent(String(requestParameters.pipelineName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdatePipelineRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PipelineBaseFromJSON(jsonValue));
    }

    /**
     * update pipeline
     */
    async updatePipeline(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PipelineBase> {
        const response = await this.updatePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
